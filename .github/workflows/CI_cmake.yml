# Multi-platform CMake CI workflow for libsparseir
# Tests across Windows, macOS, and Ubuntu with gcc and clang compilers
name: CMake Multi-Platform CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  INSTALL_PREFIX: ${{github.workspace}}/install

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          # Ubuntu with gcc and clang
          - os: ubuntu-latest
            compiler: gcc
            c_compiler: gcc
            cpp_compiler: g++
            eigen_install: sudo apt update && sudo apt install -y libeigen3-dev
          - os: ubuntu-latest
            compiler: clang
            c_compiler: clang
            cpp_compiler: clang++
            eigen_install: sudo apt update && sudo apt install -y libeigen3-dev

          # macOS with gcc and clang
          - os: macos-latest
            compiler: gcc
            c_compiler: gcc-13
            cpp_compiler: g++-13
            eigen_install: brew install eigen
          - os: macos-latest
            compiler: clang
            c_compiler: clang
            cpp_compiler: clang++
            eigen_install: brew install eigen

          # Windows with MSVC and clang
          - os: windows-latest
            compiler: msvc
            c_compiler: cl
            cpp_compiler: cl
            eigen_install: vcpkg install eigen3
          - os: windows-latest
            compiler: clang
            c_compiler: clang
            cpp_compiler: clang++
            eigen_install: vcpkg install eigen3

    runs-on: ${{ matrix.os }}
    name: ${{ matrix.os }}-${{ matrix.compiler }}

    steps:
    - uses: actions/checkout@v5

    - name: Set up MSVC (Windows)
      if: matrix.os == 'windows-latest' && matrix.compiler == 'msvc'
      uses: microsoft/setup-msbuild@v2

    - name: Setup vcpkg (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        git clone https://github.com/Microsoft/vcpkg.git
        .\vcpkg\bootstrap-vcpkg.bat
        "${{ github.workspace }}\vcpkg" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - name: Install Eigen
      run: ${{ matrix.eigen_install }}

    - name: Configure CMake (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cmake -B ${{github.workspace}}/build \
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} \
          -DSPARSEIR_BUILD_TESTING=ON \
          -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} \
          -DSPARSEIR_BUILD_FORTRAN=ON \
          -DCMAKE_INSTALL_PREFIX=${{env.INSTALL_PREFIX}} \
          -DSPARSEIR_USE_BLAS=OFF \
          -DSPARSEIR_USE_LAPACKE=OFF

    - name: Configure CMake (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        cmake -B ${{github.workspace}}/build `
          -DCMAKE_TOOLCHAIN_FILE="${{github.workspace}}/vcpkg/scripts/buildsystems/vcpkg.cmake" `
          -DSPARSEIR_BUILD_TESTING=ON `
          -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} `
          -DSPARSEIR_BUILD_FORTRAN=OFF `
          -DCMAKE_INSTALL_PREFIX=${{env.INSTALL_PREFIX}} `
          -DSPARSEIR_USE_BLAS=OFF `
          -DSPARSEIR_USE_LAPACKE=OFF

    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      run: ctest --output-on-failure --build-config ${{env.BUILD_TYPE}}

    - name: Install
      run: cmake --install ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Run test samples (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cd sample_c
        cmake -B build -DSparseIR_DIR=${{env.INSTALL_PREFIX}}/share/cmake/SparseIR
        cmake --build build
        cmake --build build --target test

    - name: Run test samples (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        cd sample_c
        cmake -B build -DSparseIR_DIR="${{env.INSTALL_PREFIX}}/share/cmake/SparseIR"
        cmake --build build --config ${{env.BUILD_TYPE}}
        cmake --build build --target test --config ${{env.BUILD_TYPE}}
  
  build_with_blas:
    strategy:
      fail-fast: false
      matrix:
        include:
          # Ubuntu with gcc and clang (BLAS/LAPACK enabled)
          - os: ubuntu-latest
            compiler: gcc
            c_compiler: gcc
            cpp_compiler: g++
            deps_install: sudo apt update && sudo apt install -y libeigen3-dev libblas-dev liblapack-dev
          - os: ubuntu-latest
            compiler: clang
            c_compiler: clang
            cpp_compiler: clang++
            deps_install: sudo apt update && sudo apt install -y libeigen3-dev libblas-dev liblapack-dev

          # macOS with gcc and clang (BLAS/LAPACK enabled)
          - os: macos-latest
            compiler: gcc
            c_compiler: gcc-13
            cpp_compiler: g++-13
            deps_install: brew install eigen openblas lapack
          - os: macos-latest
            compiler: clang
            c_compiler: clang
            cpp_compiler: clang++
            deps_install: brew install eigen openblas lapack

    runs-on: ${{ matrix.os }}
    name: ${{ matrix.os }}-${{ matrix.compiler }}-blas

    steps:
    - uses: actions/checkout@v5

    - name: Install dependencies
      run: ${{ matrix.deps_install }}

    - name: Configure CMake
      run: |
        cmake -B ${{github.workspace}}/build \
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} \
          -DSPARSEIR_BUILD_TESTING=ON \
          -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} \
          -DSPARSEIR_BUILD_FORTRAN=ON \
          -DCMAKE_INSTALL_PREFIX=${{env.INSTALL_PREFIX}} \
          -DSPARSEIR_USE_BLAS=ON \
          -DSPARSEIR_USE_LAPACKE=ON

    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      run: ctest --output-on-failure --build-config ${{env.BUILD_TYPE}}

    - name: Install
      run: cmake --install ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Run test samples
      run: |
        cd sample_c
        cmake -B build -DSparseIR_DIR=${{env.INSTALL_PREFIX}}/share/cmake/SparseIR
        cmake --build build
        cmake --build build --target test

