! Auto-generated file - do not edit manually
! Generated by generate_dlr2ir.py
! Based on template from sparseir_ext_expanded_fixed2.F90

SUBROUTINE dlr2ir_dd_1d(obj, target_dim, arr, res)
  TYPE(IR), INTENT(IN) :: obj
  INTEGER, INTENT(IN) :: target_dim
  REAL(KIND=DP), INTENT(IN), TARGET :: arr (:)
  REAL(KIND=DP), INTENT(OUT), TARGET :: res (:)

  INTEGER(KIND=c_int) :: ndim_c, target_dim_c, status_c
  INTEGER(KIND=c_int), TARGET :: input_dims_c(1), output_dims_c(1)
  input_dims_c = SHAPE(arr)
  output_dims_c = SHAPE(res)
  ndim_c = 1
  IF (target_dim < 1 .or. target_dim > 1) THEN
    CALL errore('dlr2ir_dd_1d', 'Target dimension is out of range', 1)
  ENDIF
  IF (.NOT. check_output_dims(target_dim, input_dims_c, output_dims_c)) THEN
    CALL errore('dlr2ir_dd_1d', &
        'Output dimensions are not the same as the input dimensions except for the TARGET dimension', 1)
  ENDIF
  IF (SIZE(arr, target_dim) /= obj%npoles) THEN
    CALL errore('dlr2ir_dd_1d', 'Input dimension is not the same as the number of poles', 1)
  ENDIF
  IF (SIZE(res, target_dim) /= obj%size) THEN
     CALL errore('dlr2ir_dd_1d', 'Output dimension is not the same as the size of the IR', 1)
  ENDIF
  target_dim_c = target_dim - 1

  status_c = c_spir_dlr2ir_dd(obj%dlr_f_ptr, SPIR_ORDER_COLUMN_MAJOR, &
    ndim_c, c_loc(input_dims_c), target_dim_c, c_loc(arr), c_loc(res))
  IF (status_c /= 0) THEN
    CALL errore('dlr2ir_dd_1d', 'Error converting DLR to IR', status_c)
  ENDIF
END SUBROUTINE

SUBROUTINE dlr2ir_dd_2d(obj, target_dim, arr, res)
  TYPE(IR), INTENT(IN) :: obj
  INTEGER, INTENT(IN) :: target_dim
  REAL(KIND=DP), INTENT(IN), TARGET :: arr (:,:)
  REAL(KIND=DP), INTENT(OUT), TARGET :: res (:,:)

  INTEGER(KIND=c_int) :: ndim_c, target_dim_c, status_c
  INTEGER(KIND=c_int), TARGET :: input_dims_c(2), output_dims_c(2)
  input_dims_c = SHAPE(arr)
  output_dims_c = SHAPE(res)
  ndim_c = 2
  IF (target_dim < 1 .or. target_dim > 2) THEN
    CALL errore('dlr2ir_dd_2d', 'Target dimension is out of range', 1)
  ENDIF
  IF (.NOT. check_output_dims(target_dim, input_dims_c, output_dims_c)) THEN
    CALL errore('dlr2ir_dd_2d', &
        'Output dimensions are not the same as the input dimensions except for the TARGET dimension', 1)
  ENDIF
  IF (SIZE(arr, target_dim) /= obj%npoles) THEN
    CALL errore('dlr2ir_dd_2d', 'Input dimension is not the same as the number of poles', 1)
  ENDIF
  IF (SIZE(res, target_dim) /= obj%size) THEN
     CALL errore('dlr2ir_dd_2d', 'Output dimension is not the same as the size of the IR', 1)
  ENDIF
  target_dim_c = target_dim - 1

  status_c = c_spir_dlr2ir_dd(obj%dlr_f_ptr, SPIR_ORDER_COLUMN_MAJOR, &
    ndim_c, c_loc(input_dims_c), target_dim_c, c_loc(arr), c_loc(res))
  IF (status_c /= 0) THEN
    CALL errore('dlr2ir_dd_2d', 'Error converting DLR to IR', status_c)
  ENDIF
END SUBROUTINE

SUBROUTINE dlr2ir_dd_3d(obj, target_dim, arr, res)
  TYPE(IR), INTENT(IN) :: obj
  INTEGER, INTENT(IN) :: target_dim
  REAL(KIND=DP), INTENT(IN), TARGET :: arr (:,:,:)
  REAL(KIND=DP), INTENT(OUT), TARGET :: res (:,:,:)

  INTEGER(KIND=c_int) :: ndim_c, target_dim_c, status_c
  INTEGER(KIND=c_int), TARGET :: input_dims_c(3), output_dims_c(3)
  input_dims_c = SHAPE(arr)
  output_dims_c = SHAPE(res)
  ndim_c = 3
  IF (target_dim < 1 .or. target_dim > 3) THEN
    CALL errore('dlr2ir_dd_3d', 'Target dimension is out of range', 1)
  ENDIF
  IF (.NOT. check_output_dims(target_dim, input_dims_c, output_dims_c)) THEN
    CALL errore('dlr2ir_dd_3d', &
        'Output dimensions are not the same as the input dimensions except for the TARGET dimension', 1)
  ENDIF
  IF (SIZE(arr, target_dim) /= obj%npoles) THEN
    CALL errore('dlr2ir_dd_3d', 'Input dimension is not the same as the number of poles', 1)
  ENDIF
  IF (SIZE(res, target_dim) /= obj%size) THEN
     CALL errore('dlr2ir_dd_3d', 'Output dimension is not the same as the size of the IR', 1)
  ENDIF
  target_dim_c = target_dim - 1

  status_c = c_spir_dlr2ir_dd(obj%dlr_f_ptr, SPIR_ORDER_COLUMN_MAJOR, &
    ndim_c, c_loc(input_dims_c), target_dim_c, c_loc(arr), c_loc(res))
  IF (status_c /= 0) THEN
    CALL errore('dlr2ir_dd_3d', 'Error converting DLR to IR', status_c)
  ENDIF
END SUBROUTINE

SUBROUTINE dlr2ir_dd_4d(obj, target_dim, arr, res)
  TYPE(IR), INTENT(IN) :: obj
  INTEGER, INTENT(IN) :: target_dim
  REAL(KIND=DP), INTENT(IN), TARGET :: arr (:,:,:,:)
  REAL(KIND=DP), INTENT(OUT), TARGET :: res (:,:,:,:)

  INTEGER(KIND=c_int) :: ndim_c, target_dim_c, status_c
  INTEGER(KIND=c_int), TARGET :: input_dims_c(4), output_dims_c(4)
  input_dims_c = SHAPE(arr)
  output_dims_c = SHAPE(res)
  ndim_c = 4
  IF (target_dim < 1 .or. target_dim > 4) THEN
    CALL errore('dlr2ir_dd_4d', 'Target dimension is out of range', 1)
  ENDIF
  IF (.NOT. check_output_dims(target_dim, input_dims_c, output_dims_c)) THEN
    CALL errore('dlr2ir_dd_4d', &
        'Output dimensions are not the same as the input dimensions except for the TARGET dimension', 1)
  ENDIF
  IF (SIZE(arr, target_dim) /= obj%npoles) THEN
    CALL errore('dlr2ir_dd_4d', 'Input dimension is not the same as the number of poles', 1)
  ENDIF
  IF (SIZE(res, target_dim) /= obj%size) THEN
     CALL errore('dlr2ir_dd_4d', 'Output dimension is not the same as the size of the IR', 1)
  ENDIF
  target_dim_c = target_dim - 1

  status_c = c_spir_dlr2ir_dd(obj%dlr_f_ptr, SPIR_ORDER_COLUMN_MAJOR, &
    ndim_c, c_loc(input_dims_c), target_dim_c, c_loc(arr), c_loc(res))
  IF (status_c /= 0) THEN
    CALL errore('dlr2ir_dd_4d', 'Error converting DLR to IR', status_c)
  ENDIF
END SUBROUTINE

SUBROUTINE dlr2ir_dd_5d(obj, target_dim, arr, res)
  TYPE(IR), INTENT(IN) :: obj
  INTEGER, INTENT(IN) :: target_dim
  REAL(KIND=DP), INTENT(IN), TARGET :: arr (:,:,:,:,:)
  REAL(KIND=DP), INTENT(OUT), TARGET :: res (:,:,:,:,:)

  INTEGER(KIND=c_int) :: ndim_c, target_dim_c, status_c
  INTEGER(KIND=c_int), TARGET :: input_dims_c(5), output_dims_c(5)
  input_dims_c = SHAPE(arr)
  output_dims_c = SHAPE(res)
  ndim_c = 5
  IF (target_dim < 1 .or. target_dim > 5) THEN
    CALL errore('dlr2ir_dd_5d', 'Target dimension is out of range', 1)
  ENDIF
  IF (.NOT. check_output_dims(target_dim, input_dims_c, output_dims_c)) THEN
    CALL errore('dlr2ir_dd_5d', &
        'Output dimensions are not the same as the input dimensions except for the TARGET dimension', 1)
  ENDIF
  IF (SIZE(arr, target_dim) /= obj%npoles) THEN
    CALL errore('dlr2ir_dd_5d', 'Input dimension is not the same as the number of poles', 1)
  ENDIF
  IF (SIZE(res, target_dim) /= obj%size) THEN
     CALL errore('dlr2ir_dd_5d', 'Output dimension is not the same as the size of the IR', 1)
  ENDIF
  target_dim_c = target_dim - 1

  status_c = c_spir_dlr2ir_dd(obj%dlr_f_ptr, SPIR_ORDER_COLUMN_MAJOR, &
    ndim_c, c_loc(input_dims_c), target_dim_c, c_loc(arr), c_loc(res))
  IF (status_c /= 0) THEN
    CALL errore('dlr2ir_dd_5d', 'Error converting DLR to IR', status_c)
  ENDIF
END SUBROUTINE

SUBROUTINE dlr2ir_dd_6d(obj, target_dim, arr, res)
  TYPE(IR), INTENT(IN) :: obj
  INTEGER, INTENT(IN) :: target_dim
  REAL(KIND=DP), INTENT(IN), TARGET :: arr (:,:,:,:,:,:)
  REAL(KIND=DP), INTENT(OUT), TARGET :: res (:,:,:,:,:,:)

  INTEGER(KIND=c_int) :: ndim_c, target_dim_c, status_c
  INTEGER(KIND=c_int), TARGET :: input_dims_c(6), output_dims_c(6)
  input_dims_c = SHAPE(arr)
  output_dims_c = SHAPE(res)
  ndim_c = 6
  IF (target_dim < 1 .or. target_dim > 6) THEN
    CALL errore('dlr2ir_dd_6d', 'Target dimension is out of range', 1)
  ENDIF
  IF (.NOT. check_output_dims(target_dim, input_dims_c, output_dims_c)) THEN
    CALL errore('dlr2ir_dd_6d', &
        'Output dimensions are not the same as the input dimensions except for the TARGET dimension', 1)
  ENDIF
  IF (SIZE(arr, target_dim) /= obj%npoles) THEN
    CALL errore('dlr2ir_dd_6d', 'Input dimension is not the same as the number of poles', 1)
  ENDIF
  IF (SIZE(res, target_dim) /= obj%size) THEN
     CALL errore('dlr2ir_dd_6d', 'Output dimension is not the same as the size of the IR', 1)
  ENDIF
  target_dim_c = target_dim - 1

  status_c = c_spir_dlr2ir_dd(obj%dlr_f_ptr, SPIR_ORDER_COLUMN_MAJOR, &
    ndim_c, c_loc(input_dims_c), target_dim_c, c_loc(arr), c_loc(res))
  IF (status_c /= 0) THEN
    CALL errore('dlr2ir_dd_6d', 'Error converting DLR to IR', status_c)
  ENDIF
END SUBROUTINE

SUBROUTINE dlr2ir_dd_7d(obj, target_dim, arr, res)
  TYPE(IR), INTENT(IN) :: obj
  INTEGER, INTENT(IN) :: target_dim
  REAL(KIND=DP), INTENT(IN), TARGET :: arr (:,:,:,:,:,:,:)
  REAL(KIND=DP), INTENT(OUT), TARGET :: res (:,:,:,:,:,:,:)

  INTEGER(KIND=c_int) :: ndim_c, target_dim_c, status_c
  INTEGER(KIND=c_int), TARGET :: input_dims_c(7), output_dims_c(7)
  input_dims_c = SHAPE(arr)
  output_dims_c = SHAPE(res)
  ndim_c = 7
  IF (target_dim < 1 .or. target_dim > 7) THEN
    CALL errore('dlr2ir_dd_7d', 'Target dimension is out of range', 1)
  ENDIF
  IF (.NOT. check_output_dims(target_dim, input_dims_c, output_dims_c)) THEN
    CALL errore('dlr2ir_dd_7d', &
        'Output dimensions are not the same as the input dimensions except for the TARGET dimension', 1)
  ENDIF
  IF (SIZE(arr, target_dim) /= obj%npoles) THEN
    CALL errore('dlr2ir_dd_7d', 'Input dimension is not the same as the number of poles', 1)
  ENDIF
  IF (SIZE(res, target_dim) /= obj%size) THEN
     CALL errore('dlr2ir_dd_7d', 'Output dimension is not the same as the size of the IR', 1)
  ENDIF
  target_dim_c = target_dim - 1

  status_c = c_spir_dlr2ir_dd(obj%dlr_f_ptr, SPIR_ORDER_COLUMN_MAJOR, &
    ndim_c, c_loc(input_dims_c), target_dim_c, c_loc(arr), c_loc(res))
  IF (status_c /= 0) THEN
    CALL errore('dlr2ir_dd_7d', 'Error converting DLR to IR', status_c)
  ENDIF
END SUBROUTINE

SUBROUTINE dlr2ir_zz_1d(obj, target_dim, arr, res)
  TYPE(IR), INTENT(IN) :: obj
  INTEGER, INTENT(IN) :: target_dim
  COMPLEX(KIND=DP), INTENT(IN), TARGET :: arr (:)
  COMPLEX(KIND=DP), INTENT(OUT), TARGET :: res (:)

  INTEGER(KIND=c_int) :: ndim_c, target_dim_c, status_c
  INTEGER(KIND=c_int), TARGET :: input_dims_c(1), output_dims_c(1)
  input_dims_c = SHAPE(arr)
  output_dims_c = SHAPE(res)
  ndim_c = 1
  IF (target_dim < 1 .or. target_dim > 1) THEN
    CALL errore('dlr2ir_zz_1d', 'Target dimension is out of range', 1)
  ENDIF
  IF (.NOT. check_output_dims(target_dim, input_dims_c, output_dims_c)) THEN
    CALL errore('dlr2ir_zz_1d', &
        'Output dimensions are not the same as the input dimensions except for the TARGET dimension', 1)
  ENDIF
  IF (SIZE(arr, target_dim) /= obj%npoles) THEN
    CALL errore('dlr2ir_zz_1d', 'Input dimension is not the same as the number of poles', 1)
  ENDIF
  IF (SIZE(res, target_dim) /= obj%size) THEN
     CALL errore('dlr2ir_zz_1d', 'Output dimension is not the same as the size of the IR', 1)
  ENDIF
  target_dim_c = target_dim - 1

  status_c = c_spir_dlr2ir_zz(obj%dlr_f_ptr, SPIR_ORDER_COLUMN_MAJOR, &
    ndim_c, c_loc(input_dims_c), target_dim_c, c_loc(arr), c_loc(res))
  IF (status_c /= 0) THEN
    CALL errore('dlr2ir_zz_1d', 'Error converting DLR to IR', status_c)
  ENDIF
END SUBROUTINE

SUBROUTINE dlr2ir_zz_2d(obj, target_dim, arr, res)
  TYPE(IR), INTENT(IN) :: obj
  INTEGER, INTENT(IN) :: target_dim
  COMPLEX(KIND=DP), INTENT(IN), TARGET :: arr (:,:)
  COMPLEX(KIND=DP), INTENT(OUT), TARGET :: res (:,:)

  INTEGER(KIND=c_int) :: ndim_c, target_dim_c, status_c
  INTEGER(KIND=c_int), TARGET :: input_dims_c(2), output_dims_c(2)
  input_dims_c = SHAPE(arr)
  output_dims_c = SHAPE(res)
  ndim_c = 2
  IF (target_dim < 1 .or. target_dim > 2) THEN
    CALL errore('dlr2ir_zz_2d', 'Target dimension is out of range', 1)
  ENDIF
  IF (.NOT. check_output_dims(target_dim, input_dims_c, output_dims_c)) THEN
    CALL errore('dlr2ir_zz_2d', &
        'Output dimensions are not the same as the input dimensions except for the TARGET dimension', 1)
  ENDIF
  IF (SIZE(arr, target_dim) /= obj%npoles) THEN
    CALL errore('dlr2ir_zz_2d', 'Input dimension is not the same as the number of poles', 1)
  ENDIF
  IF (SIZE(res, target_dim) /= obj%size) THEN
     CALL errore('dlr2ir_zz_2d', 'Output dimension is not the same as the size of the IR', 1)
  ENDIF
  target_dim_c = target_dim - 1

  status_c = c_spir_dlr2ir_zz(obj%dlr_f_ptr, SPIR_ORDER_COLUMN_MAJOR, &
    ndim_c, c_loc(input_dims_c), target_dim_c, c_loc(arr), c_loc(res))
  IF (status_c /= 0) THEN
    CALL errore('dlr2ir_zz_2d', 'Error converting DLR to IR', status_c)
  ENDIF
END SUBROUTINE

SUBROUTINE dlr2ir_zz_3d(obj, target_dim, arr, res)
  TYPE(IR), INTENT(IN) :: obj
  INTEGER, INTENT(IN) :: target_dim
  COMPLEX(KIND=DP), INTENT(IN), TARGET :: arr (:,:,:)
  COMPLEX(KIND=DP), INTENT(OUT), TARGET :: res (:,:,:)

  INTEGER(KIND=c_int) :: ndim_c, target_dim_c, status_c
  INTEGER(KIND=c_int), TARGET :: input_dims_c(3), output_dims_c(3)
  input_dims_c = SHAPE(arr)
  output_dims_c = SHAPE(res)
  ndim_c = 3
  IF (target_dim < 1 .or. target_dim > 3) THEN
    CALL errore('dlr2ir_zz_3d', 'Target dimension is out of range', 1)
  ENDIF
  IF (.NOT. check_output_dims(target_dim, input_dims_c, output_dims_c)) THEN
    CALL errore('dlr2ir_zz_3d', &
        'Output dimensions are not the same as the input dimensions except for the TARGET dimension', 1)
  ENDIF
  IF (SIZE(arr, target_dim) /= obj%npoles) THEN
    CALL errore('dlr2ir_zz_3d', 'Input dimension is not the same as the number of poles', 1)
  ENDIF
  IF (SIZE(res, target_dim) /= obj%size) THEN
     CALL errore('dlr2ir_zz_3d', 'Output dimension is not the same as the size of the IR', 1)
  ENDIF
  target_dim_c = target_dim - 1

  status_c = c_spir_dlr2ir_zz(obj%dlr_f_ptr, SPIR_ORDER_COLUMN_MAJOR, &
    ndim_c, c_loc(input_dims_c), target_dim_c, c_loc(arr), c_loc(res))
  IF (status_c /= 0) THEN
    CALL errore('dlr2ir_zz_3d', 'Error converting DLR to IR', status_c)
  ENDIF
END SUBROUTINE

SUBROUTINE dlr2ir_zz_4d(obj, target_dim, arr, res)
  TYPE(IR), INTENT(IN) :: obj
  INTEGER, INTENT(IN) :: target_dim
  COMPLEX(KIND=DP), INTENT(IN), TARGET :: arr (:,:,:,:)
  COMPLEX(KIND=DP), INTENT(OUT), TARGET :: res (:,:,:,:)

  INTEGER(KIND=c_int) :: ndim_c, target_dim_c, status_c
  INTEGER(KIND=c_int), TARGET :: input_dims_c(4), output_dims_c(4)
  input_dims_c = SHAPE(arr)
  output_dims_c = SHAPE(res)
  ndim_c = 4
  IF (target_dim < 1 .or. target_dim > 4) THEN
    CALL errore('dlr2ir_zz_4d', 'Target dimension is out of range', 1)
  ENDIF
  IF (.NOT. check_output_dims(target_dim, input_dims_c, output_dims_c)) THEN
    CALL errore('dlr2ir_zz_4d', &
        'Output dimensions are not the same as the input dimensions except for the TARGET dimension', 1)
  ENDIF
  IF (SIZE(arr, target_dim) /= obj%npoles) THEN
    CALL errore('dlr2ir_zz_4d', 'Input dimension is not the same as the number of poles', 1)
  ENDIF
  IF (SIZE(res, target_dim) /= obj%size) THEN
     CALL errore('dlr2ir_zz_4d', 'Output dimension is not the same as the size of the IR', 1)
  ENDIF
  target_dim_c = target_dim - 1

  status_c = c_spir_dlr2ir_zz(obj%dlr_f_ptr, SPIR_ORDER_COLUMN_MAJOR, &
    ndim_c, c_loc(input_dims_c), target_dim_c, c_loc(arr), c_loc(res))
  IF (status_c /= 0) THEN
    CALL errore('dlr2ir_zz_4d', 'Error converting DLR to IR', status_c)
  ENDIF
END SUBROUTINE

SUBROUTINE dlr2ir_zz_5d(obj, target_dim, arr, res)
  TYPE(IR), INTENT(IN) :: obj
  INTEGER, INTENT(IN) :: target_dim
  COMPLEX(KIND=DP), INTENT(IN), TARGET :: arr (:,:,:,:,:)
  COMPLEX(KIND=DP), INTENT(OUT), TARGET :: res (:,:,:,:,:)

  INTEGER(KIND=c_int) :: ndim_c, target_dim_c, status_c
  INTEGER(KIND=c_int), TARGET :: input_dims_c(5), output_dims_c(5)
  input_dims_c = SHAPE(arr)
  output_dims_c = SHAPE(res)
  ndim_c = 5
  IF (target_dim < 1 .or. target_dim > 5) THEN
    CALL errore('dlr2ir_zz_5d', 'Target dimension is out of range', 1)
  ENDIF
  IF (.NOT. check_output_dims(target_dim, input_dims_c, output_dims_c)) THEN
    CALL errore('dlr2ir_zz_5d', &
        'Output dimensions are not the same as the input dimensions except for the TARGET dimension', 1)
  ENDIF
  IF (SIZE(arr, target_dim) /= obj%npoles) THEN
    CALL errore('dlr2ir_zz_5d', 'Input dimension is not the same as the number of poles', 1)
  ENDIF
  IF (SIZE(res, target_dim) /= obj%size) THEN
     CALL errore('dlr2ir_zz_5d', 'Output dimension is not the same as the size of the IR', 1)
  ENDIF
  target_dim_c = target_dim - 1

  status_c = c_spir_dlr2ir_zz(obj%dlr_f_ptr, SPIR_ORDER_COLUMN_MAJOR, &
    ndim_c, c_loc(input_dims_c), target_dim_c, c_loc(arr), c_loc(res))
  IF (status_c /= 0) THEN
    CALL errore('dlr2ir_zz_5d', 'Error converting DLR to IR', status_c)
  ENDIF
END SUBROUTINE

SUBROUTINE dlr2ir_zz_6d(obj, target_dim, arr, res)
  TYPE(IR), INTENT(IN) :: obj
  INTEGER, INTENT(IN) :: target_dim
  COMPLEX(KIND=DP), INTENT(IN), TARGET :: arr (:,:,:,:,:,:)
  COMPLEX(KIND=DP), INTENT(OUT), TARGET :: res (:,:,:,:,:,:)

  INTEGER(KIND=c_int) :: ndim_c, target_dim_c, status_c
  INTEGER(KIND=c_int), TARGET :: input_dims_c(6), output_dims_c(6)
  input_dims_c = SHAPE(arr)
  output_dims_c = SHAPE(res)
  ndim_c = 6
  IF (target_dim < 1 .or. target_dim > 6) THEN
    CALL errore('dlr2ir_zz_6d', 'Target dimension is out of range', 1)
  ENDIF
  IF (.NOT. check_output_dims(target_dim, input_dims_c, output_dims_c)) THEN
    CALL errore('dlr2ir_zz_6d', &
        'Output dimensions are not the same as the input dimensions except for the TARGET dimension', 1)
  ENDIF
  IF (SIZE(arr, target_dim) /= obj%npoles) THEN
    CALL errore('dlr2ir_zz_6d', 'Input dimension is not the same as the number of poles', 1)
  ENDIF
  IF (SIZE(res, target_dim) /= obj%size) THEN
     CALL errore('dlr2ir_zz_6d', 'Output dimension is not the same as the size of the IR', 1)
  ENDIF
  target_dim_c = target_dim - 1

  status_c = c_spir_dlr2ir_zz(obj%dlr_f_ptr, SPIR_ORDER_COLUMN_MAJOR, &
    ndim_c, c_loc(input_dims_c), target_dim_c, c_loc(arr), c_loc(res))
  IF (status_c /= 0) THEN
    CALL errore('dlr2ir_zz_6d', 'Error converting DLR to IR', status_c)
  ENDIF
END SUBROUTINE

SUBROUTINE dlr2ir_zz_7d(obj, target_dim, arr, res)
  TYPE(IR), INTENT(IN) :: obj
  INTEGER, INTENT(IN) :: target_dim
  COMPLEX(KIND=DP), INTENT(IN), TARGET :: arr (:,:,:,:,:,:,:)
  COMPLEX(KIND=DP), INTENT(OUT), TARGET :: res (:,:,:,:,:,:,:)

  INTEGER(KIND=c_int) :: ndim_c, target_dim_c, status_c
  INTEGER(KIND=c_int), TARGET :: input_dims_c(7), output_dims_c(7)
  input_dims_c = SHAPE(arr)
  output_dims_c = SHAPE(res)
  ndim_c = 7
  IF (target_dim < 1 .or. target_dim > 7) THEN
    CALL errore('dlr2ir_zz_7d', 'Target dimension is out of range', 1)
  ENDIF
  IF (.NOT. check_output_dims(target_dim, input_dims_c, output_dims_c)) THEN
    CALL errore('dlr2ir_zz_7d', &
        'Output dimensions are not the same as the input dimensions except for the TARGET dimension', 1)
  ENDIF
  IF (SIZE(arr, target_dim) /= obj%npoles) THEN
    CALL errore('dlr2ir_zz_7d', 'Input dimension is not the same as the number of poles', 1)
  ENDIF
  IF (SIZE(res, target_dim) /= obj%size) THEN
     CALL errore('dlr2ir_zz_7d', 'Output dimension is not the same as the size of the IR', 1)
  ENDIF
  target_dim_c = target_dim - 1

  status_c = c_spir_dlr2ir_zz(obj%dlr_f_ptr, SPIR_ORDER_COLUMN_MAJOR, &
    ndim_c, c_loc(input_dims_c), target_dim_c, c_loc(arr), c_loc(res))
  IF (status_c /= 0) THEN
    CALL errore('dlr2ir_zz_7d', 'Error converting DLR to IR', status_c)
  ENDIF
END SUBROUTINE
