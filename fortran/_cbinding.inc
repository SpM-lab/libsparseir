function c_spir_check_kernel_ptr(kernel) bind(c, name="spir_check_kernel_ptr") result(c_spir_check_kernel_ptr)
  use iso_c_binding
  type(c_ptr), value :: kernel
  integer(c_int) :: c_spir_check_kernel_ptr
end function

! Autogenerated Fortran interfaces for ../include/sparseir/sparseir.h
subroutine c_spir_destroy_kernel(obj) bind(c, name="spir_destroy_kernel")
  use iso_c_binding
  type(c_ptr), intent(out) :: obj
end subroutine

function c_spir_clone_kernel(src) bind(c, name="spir_clone_kernel") result(c_spir_clone_kernel)
  use iso_c_binding
  type(c_ptr), intent(in) :: src
  type(c_ptr) :: c_spir_clone_kernel
end function

function c_spir_is_assigned_kernel(obj) bind(c, name="spir_is_assigned_kernel") result(c_spir_is_assigned_kernel)
  use iso_c_binding
  type(c_ptr), value :: obj
  integer(c_int) :: c_spir_is_assigned_kernel
end function

subroutine c_spir_destroy_funcs(obj) bind(c, name="spir_destroy_funcs")
  use iso_c_binding
  type(c_ptr), intent(out) :: obj
end subroutine

function c_spir_clone_funcs(src) bind(c, name="spir_clone_funcs") result(c_spir_clone_funcs)
  use iso_c_binding
  type(c_ptr), intent(in) :: src
  type(c_ptr) :: c_spir_clone_funcs
end function

function c_spir_is_assigned_funcs(obj) bind(c, name="spir_is_assigned_funcs") result(c_spir_is_assigned_funcs)
  use iso_c_binding
  type(c_ptr), intent(in) :: obj
  integer(c_int) :: c_spir_is_assigned_funcs
end function

subroutine c_spir_destroy_matsubara_funcs(obj) bind(c, name="spir_destroy_matsubara_funcs")
  use iso_c_binding
  type(c_ptr), intent(out) :: obj
end subroutine

function c_spir_clone_matsubara_funcs(src) bind(c, name="spir_clone_matsubara_funcs") result(c_spir_clone_matsubara_funcs)
  use iso_c_binding
  type(c_ptr), intent(in) :: src
  type(c_ptr) :: c_spir_clone_matsubara_funcs
end function

function c_spir_is_assigned_matsubara_funcs(obj) bind(c, name="spir_is_assigned_matsubara_funcs") result(c_spir_is_assigned_matsubara_funcs)
  use iso_c_binding
  type(c_ptr), intent(in) :: obj
  integer(c_int) :: c_spir_is_assigned_matsubara_funcs
end function

subroutine c_spir_destroy_finite_temp_basis(obj) bind(c, name="spir_destroy_finite_temp_basis")
  use iso_c_binding
  type(c_ptr), intent(out) :: obj
end subroutine

function c_spir_clone_finite_temp_basis(src) bind(c, name="spir_clone_finite_temp_basis") result(c_spir_clone_finite_temp_basis)
  use iso_c_binding
  type(c_ptr), intent(in) :: src
  type(c_ptr) :: c_spir_clone_finite_temp_basis
end function

function c_spir_is_assigned_finite_temp_basis(obj) bind(c, name="spir_is_assigned_finite_temp_basis") result(c_spir_is_assigned_finite_temp_basis)
  use iso_c_binding
  type(c_ptr), intent(in) :: obj
  integer(c_int) :: c_spir_is_assigned_finite_temp_basis
end function

subroutine c_spir_destroy_sampling(obj) bind(c, name="spir_destroy_sampling")
  use iso_c_binding
  type(c_ptr), intent(out) :: obj
end subroutine

function c_spir_clone_sampling(src) bind(c, name="spir_clone_sampling") result(c_spir_clone_sampling)
  use iso_c_binding
  type(c_ptr), intent(in) :: src
  type(c_ptr) :: c_spir_clone_sampling
end function

function c_spir_is_assigned_sampling(obj) bind(c, name="spir_is_assigned_sampling") result(c_spir_is_assigned_sampling)
  use iso_c_binding
  type(c_ptr), intent(in) :: obj
  integer(c_int) :: c_spir_is_assigned_sampling
end function

subroutine c_spir_destroy_sve_result(obj) bind(c, name="spir_destroy_sve_result")
  use iso_c_binding
  type(c_ptr), intent(out) :: obj
end subroutine

function c_spir_clone_sve_result(src) bind(c, name="spir_clone_sve_result") result(c_spir_clone_sve_result)
  use iso_c_binding
  type(c_ptr), intent(in) :: src
  type(c_ptr) :: c_spir_clone_sve_result
end function

function c_spir_is_assigned_sve_result(obj) bind(c, name="spir_is_assigned_sve_result") result(c_spir_is_assigned_sve_result)
  use iso_c_binding
  type(c_ptr), intent(in) :: obj
  integer(c_int) :: c_spir_is_assigned_sve_result
end function

subroutine c_spir_destroy_dlr(obj) bind(c, name="spir_destroy_dlr")
  use iso_c_binding
  type(c_ptr), intent(out) :: obj
end subroutine

function c_spir_clone_dlr(src) bind(c, name="spir_clone_dlr") result(c_spir_clone_dlr)
  use iso_c_binding
  type(c_ptr), intent(in) :: src
  type(c_ptr) :: c_spir_clone_dlr
end function

function c_spir_is_assigned_dlr(obj) bind(c, name="spir_is_assigned_dlr") result(c_spir_is_assigned_dlr)
  use iso_c_binding
  type(c_ptr), intent(in) :: obj
  integer(c_int) :: c_spir_is_assigned_dlr
end function

function c_spir_logistic_kernel_new(kernel, lambda) bind(c, name="spir_logistic_kernel_new") result(c_spir_logistic_kernel_new)
  use iso_c_binding
  type(c_ptr), intent(out) :: kernel
  real(c_double), value :: lambda
  integer(c_int) :: c_spir_logistic_kernel_new
end function

function c_spir_regularized_bose_kernel_new(kernel, lambda) bind(c, name="spir_regularized_bose_kernel_new") result(c_spir_regularized_bose_kernel_new)
  use iso_c_binding
  type(c_ptr) :: kernel
  real(c_double), value :: lambda
  integer(c_int) :: c_spir_regularized_bose_kernel_new
end function

function c_spir_sve_result_new(sve, k, epsilon) bind(c, name="spir_sve_result_new") result(c_spir_sve_result_new)
  use iso_c_binding
  type(c_ptr) :: sve
  type(c_ptr), value :: k
  real(c_double), value :: epsilon
  integer(c_int) :: c_spir_sve_result_new
end function

function c_spir_kernel_domain(k, xmin, xmax, ymin, ymax) bind(c, name="spir_kernel_domain") result(c_spir_kernel_domain)
  use iso_c_binding
  type(c_ptr), value :: k
  real(c_double), intent(out) :: xmin
  real(c_double), intent(out) :: xmax
  real(c_double), intent(out) :: ymin
  real(c_double), intent(out) :: ymax
  integer(c_int) :: c_spir_kernel_domain
end function

function c_spir_finite_temp_basis_get_size(b, size) bind(c, name="spir_finite_temp_basis_get_size") result(c_spir_finite_temp_basis_get_size)
  use iso_c_binding
  type(c_ptr), intent(in) :: b
  integer(c_int), intent(out) :: size
  integer(c_int) :: c_spir_finite_temp_basis_get_size
end function

function c_spir_finite_temp_basis_get_statistics(b, statistics) bind(c, name="spir_finite_temp_basis_get_statistics") result(c_spir_finite_temp_basis_get_statistics)
  use iso_c_binding
  type(c_ptr), intent(in) :: b
  integer(c_int), intent(out) :: statistics
  integer(c_int) :: c_spir_finite_temp_basis_get_statistics
end function

function c_spir_sampling_get_statistics(s, statistics) bind(c, name="spir_sampling_get_statistics") result(c_spir_sampling_get_statistics)
  use iso_c_binding
  type(c_ptr), intent(in) :: s
  integer(c_int), intent(out) :: statistics
  integer(c_int) :: c_spir_sampling_get_statistics
end function

function c_spir_tau_sampling_new(s, b) bind(c, name="spir_tau_sampling_new") result(c_spir_tau_sampling_new)
  use iso_c_binding
  type(c_ptr) :: s
  type(c_ptr), intent(in) :: b
  integer(c_int) :: c_spir_tau_sampling_new
end function

function c_spir_matsubara_sampling_new(s, b, positive_only) bind(c, name="spir_matsubara_sampling_new") result(c_spir_matsubara_sampling_new)
  use iso_c_binding
  type(c_ptr) :: s
  type(c_ptr), intent(in) :: b
  integer(c_int), value :: positive_only
  integer(c_int) :: c_spir_matsubara_sampling_new
end function

function c_spir_matsubara_sampling_dlr_new(s, dlr, n_smpl_points, smpl_points, positive_only) bind(c, name="spir_matsubara_sampling_dlr_new") result(c_spir_matsubara_sampling_dlr_new)
  use iso_c_binding
  type(c_ptr) :: s
  type(c_ptr), intent(in) :: dlr
  integer(c_int), value :: n_smpl_points
  integer(c_int), intent(out) :: smpl_points
  integer(c_int), value :: positive_only
  integer(c_int) :: c_spir_matsubara_sampling_dlr_new
end function

function c_spir_matsubara_sampling_get_sampling_points(s, n_points, points) bind(c, name="spir_matsubara_sampling_get_sampling_points") result(c_spir_matsubara_sampling_get_sampling_points)
  use iso_c_binding
  type(c_ptr), intent(in) :: s
  integer(c_int), value :: n_points
  integer(c_int), intent(out) :: points
  integer(c_int) :: c_spir_matsubara_sampling_get_sampling_points
end function

function c_spir_matsubara_sampling_get_num_points(s, n_points) bind(c, name="spir_matsubara_sampling_get_num_points") result(c_spir_matsubara_sampling_get_num_points)
  use iso_c_binding
  type(c_ptr), intent(in) :: s
  integer(c_int), intent(out) :: n_points
  integer(c_int) :: c_spir_matsubara_sampling_get_num_points
end function

function c_spir_dlr_new(dlr, b) bind(c, name="spir_dlr_new") result(c_spir_dlr_new)
  use iso_c_binding
  type(c_ptr) :: dlr
  type(c_ptr), intent(in) :: b
  integer(c_int) :: c_spir_dlr_new
end function

function c_spir_dlr_new_with_poles(dlr, b, npoles, poles) bind(c, name="spir_dlr_new_with_poles") result(c_spir_dlr_new_with_poles)
  use iso_c_binding
  type(c_ptr) :: dlr
  type(c_ptr), intent(in) :: b
  integer(c_int), value :: npoles
  real(c_double), intent(out) :: poles
  integer(c_int) :: c_spir_dlr_new_with_poles
end function

function c_spir_dlr_get_statistics(dlr, statistics) bind(c, name="spir_dlr_get_statistics") result(c_spir_dlr_get_statistics)
  use iso_c_binding
  type(c_ptr), intent(in) :: dlr
  integer(c_int), intent(out) :: statistics
  integer(c_int) :: c_spir_dlr_get_statistics
end function

function c_spir_sampling_evaluate_dd(s, order, ndim, input_dims, target_dim, input, out) bind(c, name="spir_sampling_evaluate_dd") result(c_spir_sampling_evaluate_dd)
  use iso_c_binding
  type(c_ptr), intent(in) :: s
  integer(c_int), value :: order
  integer(c_int), value :: ndim
  integer(c_int), intent(out) :: input_dims
  integer(c_int), value :: target_dim
  real(c_double), intent(out) :: input
  real(c_double), intent(out) :: out
  integer(c_int) :: c_spir_sampling_evaluate_dd
end function

function c_spir_sampling_evaluate_dz(s, order, ndim, input_dims, target_dim, input, out) bind(c, name="spir_sampling_evaluate_dz") result(c_spir_sampling_evaluate_dz)
  use iso_c_binding
  type(c_ptr), intent(in) :: s
  integer(c_int), value :: order
  integer(c_int), value :: ndim
  integer(c_int), intent(out) :: input_dims
  integer(c_int), value :: target_dim
  real(c_double), intent(out) :: input
  type(c_ptr), intent(out) :: out
  integer(c_int) :: c_spir_sampling_evaluate_dz
end function

function c_spir_sampling_evaluate_zz(s, order, ndim, input_dims, target_dim, input, out) bind(c, name="spir_sampling_evaluate_zz") result(c_spir_sampling_evaluate_zz)
  use iso_c_binding
  type(c_ptr), intent(in) :: s
  integer(c_int), value :: order
  integer(c_int), value :: ndim
  integer(c_int), intent(out) :: input_dims
  integer(c_int), value :: target_dim
  type(c_ptr), intent(in) :: input
  type(c_ptr), intent(out) :: out
  integer(c_int) :: c_spir_sampling_evaluate_zz
end function

function c_spir_sampling_fit_dd(s, order, ndim, input_dims, target_dim, input, out) bind(c, name="spir_sampling_fit_dd") result(c_spir_sampling_fit_dd)
  use iso_c_binding
  type(c_ptr), intent(in) :: s
  integer(c_int), value :: order
  integer(c_int), value :: ndim
  integer(c_int), intent(out) :: input_dims
  integer(c_int), value :: target_dim
  real(c_double), intent(out) :: input
  real(c_double), intent(out) :: out
  integer(c_int) :: c_spir_sampling_fit_dd
end function

function c_spir_sampling_fit_zz(s, order, ndim, input_dims, target_dim, input, out) bind(c, name="spir_sampling_fit_zz") result(c_spir_sampling_fit_zz)
  use iso_c_binding
  type(c_ptr), intent(in) :: s
  integer(c_int), value :: order
  integer(c_int), value :: ndim
  integer(c_int), intent(out) :: input_dims
  integer(c_int), value :: target_dim
  type(c_ptr), intent(in) :: input
  type(c_ptr), intent(out) :: out
  integer(c_int) :: c_spir_sampling_fit_zz
end function

function c_spir_dlr_get_num_poles(dlr, num_poles) bind(c, name="spir_dlr_get_num_poles") result(c_spir_dlr_get_num_poles)
  use iso_c_binding
  type(c_ptr), intent(in) :: dlr
  integer(c_int), intent(out) :: num_poles
  integer(c_int) :: c_spir_dlr_get_num_poles
end function

function c_spir_dlr_get_poles(dlr, poles) bind(c, name="spir_dlr_get_poles") result(c_spir_dlr_get_poles)
  use iso_c_binding
  type(c_ptr), intent(in) :: dlr
  real(c_double), intent(out) :: poles
  integer(c_int) :: c_spir_dlr_get_poles
end function

function c_spir_dlr_from_IR_dd(dlr, order, ndim, input_dims, target_dim, input, out) bind(c, name="spir_dlr_from_IR_dd") result(c_spir_dlr_from_IR_dd)
  use iso_c_binding
  type(c_ptr), intent(in) :: dlr
  integer(c_int), value :: order
  integer(c_int), value :: ndim
  integer(c_int), intent(out) :: input_dims
  integer(c_int), value :: target_dim
  real(c_double), intent(out) :: input
  real(c_double), intent(out) :: out
  integer(c_int) :: c_spir_dlr_from_IR_dd
end function

function c_spir_dlr_from_IR_zz(dlr, order, ndim, input_dims, target_dim, input, out) bind(c, name="spir_dlr_from_IR_zz") result(c_spir_dlr_from_IR_zz)
  use iso_c_binding
  type(c_ptr), intent(in) :: dlr
  integer(c_int), value :: order
  integer(c_int), value :: ndim
  integer(c_int), intent(out) :: input_dims
  integer(c_int), value :: target_dim
  type(c_ptr), intent(in) :: input
  type(c_ptr), intent(out) :: out
  integer(c_int) :: c_spir_dlr_from_IR_zz
end function

function c_spir_dlr_to_IR_dd(dlr, order, ndim, input_dims, target_dim, input, out) bind(c, name="spir_dlr_to_IR_dd") result(c_spir_dlr_to_IR_dd)
  use iso_c_binding
  type(c_ptr), intent(in) :: dlr
  integer(c_int), value :: order
  integer(c_int), value :: ndim
  integer(c_int), intent(out) :: input_dims
  integer(c_int), value :: target_dim
  real(c_double), intent(out) :: input
  real(c_double), intent(out) :: out
  integer(c_int) :: c_spir_dlr_to_IR_dd
end function

function c_spir_dlr_to_IR_zz(dlr, order, ndim, input_dims, target_dim, input, out) bind(c, name="spir_dlr_to_IR_zz") result(c_spir_dlr_to_IR_zz)
  use iso_c_binding
  type(c_ptr), intent(in) :: dlr
  integer(c_int), value :: order
  integer(c_int), value :: ndim
  integer(c_int), intent(out) :: input_dims
  integer(c_int), value :: target_dim
  type(c_ptr), intent(in) :: input
  type(c_ptr), intent(out) :: out
  integer(c_int) :: c_spir_dlr_to_IR_zz
end function

function c_spir_dlr_get_u(dlr, u) bind(c, name="spir_dlr_get_u") result(c_spir_dlr_get_u)
  use iso_c_binding
  type(c_ptr), intent(in) :: dlr
  type(c_ptr) :: u
  integer(c_int) :: c_spir_dlr_get_u
end function

function c_spir_dlr_get_uhat(dlr, uhat) bind(c, name="spir_dlr_get_uhat") result(c_spir_dlr_get_uhat)
  use iso_c_binding
  type(c_ptr), intent(in) :: dlr
  type(c_ptr) :: uhat
  integer(c_int) :: c_spir_dlr_get_uhat
end function

function c_spir_finite_temp_basis_new(b, statistics, beta, omega_max, epsilon) bind(c, name="spir_finite_temp_basis_new") result(c_spir_finite_temp_basis_new)
  use iso_c_binding
  type(c_ptr) :: b
  integer(c_int), value :: statistics
  real(c_double), value :: beta
  real(c_double), value :: omega_max
  real(c_double), value :: epsilon
  integer(c_int) :: c_spir_finite_temp_basis_new
end function

function c_spir_finite_temp_basis_new_with_sve(b, statistics, beta, omega_max, k, sve) bind(c, name="spir_finite_temp_basis_new_with_sve") result(c_spir_finite_temp_basis_new_with_sve)
  use iso_c_binding
  type(c_ptr) :: b
  integer(c_int), value :: statistics
  real(c_double), value :: beta
  real(c_double), value :: omega_max
  type(c_ptr), intent(in) :: k
  type(c_ptr), intent(in) :: sve
  integer(c_int) :: c_spir_finite_temp_basis_new_with_sve
end function

function c_spir_finite_temp_basis_get_u(b, u) bind(c, name="spir_finite_temp_basis_get_u") result(c_spir_finite_temp_basis_get_u)
  use iso_c_binding
  type(c_ptr), intent(in) :: b
  type(c_ptr) :: u
  integer(c_int) :: c_spir_finite_temp_basis_get_u
end function

function c_spir_finite_temp_basis_get_v(b, v) bind(c, name="spir_finite_temp_basis_get_v") result(c_spir_finite_temp_basis_get_v)
  use iso_c_binding
  type(c_ptr), intent(in) :: b
  type(c_ptr) :: v
  integer(c_int) :: c_spir_finite_temp_basis_get_v
end function

function c_spir_finite_temp_basis_get_uhat(b, uhat) bind(c, name="spir_finite_temp_basis_get_uhat") result(c_spir_finite_temp_basis_get_uhat)
  use iso_c_binding
  type(c_ptr), intent(in) :: b
  type(c_ptr) :: uhat
  integer(c_int) :: c_spir_finite_temp_basis_get_uhat
end function

function c_spir_funcs_get_size(funcs, size) bind(c, name="spir_funcs_get_size") result(c_spir_funcs_get_size)
  use iso_c_binding
  type(c_ptr), intent(in) :: funcs
  integer(c_int), intent(out) :: size
  integer(c_int) :: c_spir_funcs_get_size
end function

function c_spir_evaluate_funcs(funcs, x, out) bind(c, name="spir_evaluate_funcs") result(c_spir_evaluate_funcs)
  use iso_c_binding
  type(c_ptr), intent(in) :: funcs
  real(c_double), value :: x
  real(c_double), intent(out) :: out
  integer(c_int) :: c_spir_evaluate_funcs
end function

function c_spir_evaluate_matsubara_funcs(uiw, order, num_freqs, matsubara_freq_indices, out) bind(c, name="spir_evaluate_matsubara_funcs") result(c_spir_evaluate_matsubara_funcs)
  use iso_c_binding
  type(c_ptr), intent(in) :: uiw
  integer(c_int), value :: order
  integer(c_int), value :: num_freqs
  integer(c_int), intent(out) :: matsubara_freq_indices
  type(c_ptr), intent(out) :: out
  integer(c_int) :: c_spir_evaluate_matsubara_funcs
end function

function c_spir_sampling_get_num_points(s, num_points) bind(c, name="spir_sampling_get_num_points") result(c_spir_sampling_get_num_points)
  use iso_c_binding
  type(c_ptr), intent(in) :: s
  integer(c_int), intent(out) :: num_points
  integer(c_int) :: c_spir_sampling_get_num_points
end function

function c_spir_sampling_get_tau_points(s, points) bind(c, name="spir_sampling_get_tau_points") result(c_spir_sampling_get_tau_points)
  use iso_c_binding
  type(c_ptr), intent(in) :: s
  real(c_double), intent(out) :: points
  integer(c_int) :: c_spir_sampling_get_tau_points
end function

function c_spir_sampling_get_matsubara_points(s, points) bind(c, name="spir_sampling_get_matsubara_points") result(c_spir_sampling_get_matsubara_points)
  use iso_c_binding
  type(c_ptr), intent(in) :: s
  integer(c_int), intent(out) :: points
  integer(c_int) :: c_spir_sampling_get_matsubara_points
end function

function c_spir_matsubara_funcs_get_size(funcs, size) bind(c, name="spir_matsubara_funcs_get_size") result(c_spir_matsubara_funcs_get_size)
  use iso_c_binding
  type(c_ptr), intent(in) :: funcs
  integer(c_int), intent(out) :: size
  integer(c_int) :: c_spir_matsubara_funcs_get_size
end function

