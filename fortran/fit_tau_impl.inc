! Auto-generated file - do not edit manually
! Generated by generate_fit_tau.py
! Based on template from tmp.f90

SUBROUTINE fit_tau_dd_1d(obj, target_dim, arr, res)
  TYPE(IR), intent(in) :: obj
  INTEGER, intent(in) :: target_dim
  REAL(KIND=DP), intent(in), TARGET :: arr (:)
  REAL(KIND=DP), INTENT(OUT), TARGET :: res (:)

  INTEGER(KIND=c_int) :: ndim_c, target_dim_c, status_c
  INTEGER(KIND=c_int), TARGET :: input_dims_c(1), output_dims_c(1)
  input_dims_c = SHAPE(arr)
  output_dims_c = SHAPE(res)
  ndim_c = 1
  IF (target_dim < 1 .or. target_dim > 1) THEN
    CALL errore('fit_tau_dd_1d', 'Target dimension is out of range', 1)
  ENDIF
  IF (input_dims_c(target_dim) /= obj%ntau) THEN
    CALL errore('fit_tau_dd_1d', 'Target dimension is not the same as the number of tau sampling points', 1)
  ENDIF
  IF (output_dims_c(target_dim) /= obj%size) THEN
    CALL errore('fit_tau_dd_1d', 'Target dimension is not the same as the basis size', 1)
  ENDIF
  IF (.NOT. check_output_dims(target_dim, input_dims_c, output_dims_c)) THEN
    CALL errore('fit_tau_dd_1d', &
        'Output dimensions are not the same as the input dimensions except for the TARGET dimension', 1)
  ENDIF
  target_dim_c = target_dim - 1
  
  status_c = c_spir_sampling_fit_dd(obj%tau_smpl_ptr, SPIR_ORDER_COLUMN_MAJOR, &
    ndim_c, c_loc(input_dims_c), target_dim_c, c_loc(arr), c_loc(res))
  IF (status_c /= 0) THEN
    CALL errore('fit_tau_dd_1d', 'Error fitting on tau sampling points', status_c)
  ENDIF
END SUBROUTINE

SUBROUTINE fit_tau_dd_2d(obj, target_dim, arr, res)
  TYPE(IR), intent(in) :: obj
  INTEGER, intent(in) :: target_dim
  REAL(KIND=DP), intent(in), TARGET :: arr (:,:)
  REAL(KIND=DP), INTENT(OUT), TARGET :: res (:,:)

  INTEGER(KIND=c_int) :: ndim_c, target_dim_c, status_c
  INTEGER(KIND=c_int), TARGET :: input_dims_c(2), output_dims_c(2)
  input_dims_c = SHAPE(arr)
  output_dims_c = SHAPE(res)
  ndim_c = 2
  IF (target_dim < 1 .or. target_dim > 2) THEN
    CALL errore('fit_tau_dd_2d', 'Target dimension is out of range', 1)
  ENDIF
  IF (input_dims_c(target_dim) /= obj%ntau) THEN
    CALL errore('fit_tau_dd_2d', 'Target dimension is not the same as the number of tau sampling points', 1)
  ENDIF
  IF (output_dims_c(target_dim) /= obj%size) THEN
    CALL errore('fit_tau_dd_2d', 'Target dimension is not the same as the basis size', 1)
  ENDIF
  IF (.NOT. check_output_dims(target_dim, input_dims_c, output_dims_c)) THEN
    CALL errore('fit_tau_dd_2d', &
        'Output dimensions are not the same as the input dimensions except for the TARGET dimension', 1)
  ENDIF
  target_dim_c = target_dim - 1
  
  status_c = c_spir_sampling_fit_dd(obj%tau_smpl_ptr, SPIR_ORDER_COLUMN_MAJOR, &
    ndim_c, c_loc(input_dims_c), target_dim_c, c_loc(arr), c_loc(res))
  IF (status_c /= 0) THEN
    CALL errore('fit_tau_dd_2d', 'Error fitting on tau sampling points', status_c)
  ENDIF
END SUBROUTINE

SUBROUTINE fit_tau_dd_3d(obj, target_dim, arr, res)
  TYPE(IR), intent(in) :: obj
  INTEGER, intent(in) :: target_dim
  REAL(KIND=DP), intent(in), TARGET :: arr (:,:,:)
  REAL(KIND=DP), INTENT(OUT), TARGET :: res (:,:,:)

  INTEGER(KIND=c_int) :: ndim_c, target_dim_c, status_c
  INTEGER(KIND=c_int), TARGET :: input_dims_c(3), output_dims_c(3)
  input_dims_c = SHAPE(arr)
  output_dims_c = SHAPE(res)
  ndim_c = 3
  IF (target_dim < 1 .or. target_dim > 3) THEN
    CALL errore('fit_tau_dd_3d', 'Target dimension is out of range', 1)
  ENDIF
  IF (input_dims_c(target_dim) /= obj%ntau) THEN
    CALL errore('fit_tau_dd_3d', 'Target dimension is not the same as the number of tau sampling points', 1)
  ENDIF
  IF (output_dims_c(target_dim) /= obj%size) THEN
    CALL errore('fit_tau_dd_3d', 'Target dimension is not the same as the basis size', 1)
  ENDIF
  IF (.NOT. check_output_dims(target_dim, input_dims_c, output_dims_c)) THEN
    CALL errore('fit_tau_dd_3d', &
        'Output dimensions are not the same as the input dimensions except for the TARGET dimension', 1)
  ENDIF
  target_dim_c = target_dim - 1
  
  status_c = c_spir_sampling_fit_dd(obj%tau_smpl_ptr, SPIR_ORDER_COLUMN_MAJOR, &
    ndim_c, c_loc(input_dims_c), target_dim_c, c_loc(arr), c_loc(res))
  IF (status_c /= 0) THEN
    CALL errore('fit_tau_dd_3d', 'Error fitting on tau sampling points', status_c)
  ENDIF
END SUBROUTINE

SUBROUTINE fit_tau_dd_4d(obj, target_dim, arr, res)
  TYPE(IR), intent(in) :: obj
  INTEGER, intent(in) :: target_dim
  REAL(KIND=DP), intent(in), TARGET :: arr (:,:,:,:)
  REAL(KIND=DP), INTENT(OUT), TARGET :: res (:,:,:,:)

  INTEGER(KIND=c_int) :: ndim_c, target_dim_c, status_c
  INTEGER(KIND=c_int), TARGET :: input_dims_c(4), output_dims_c(4)
  input_dims_c = SHAPE(arr)
  output_dims_c = SHAPE(res)
  ndim_c = 4
  IF (target_dim < 1 .or. target_dim > 4) THEN
    CALL errore('fit_tau_dd_4d', 'Target dimension is out of range', 1)
  ENDIF
  IF (input_dims_c(target_dim) /= obj%ntau) THEN
    CALL errore('fit_tau_dd_4d', 'Target dimension is not the same as the number of tau sampling points', 1)
  ENDIF
  IF (output_dims_c(target_dim) /= obj%size) THEN
    CALL errore('fit_tau_dd_4d', 'Target dimension is not the same as the basis size', 1)
  ENDIF
  IF (.NOT. check_output_dims(target_dim, input_dims_c, output_dims_c)) THEN
    CALL errore('fit_tau_dd_4d', &
        'Output dimensions are not the same as the input dimensions except for the TARGET dimension', 1)
  ENDIF
  target_dim_c = target_dim - 1
  
  status_c = c_spir_sampling_fit_dd(obj%tau_smpl_ptr, SPIR_ORDER_COLUMN_MAJOR, &
    ndim_c, c_loc(input_dims_c), target_dim_c, c_loc(arr), c_loc(res))
  IF (status_c /= 0) THEN
    CALL errore('fit_tau_dd_4d', 'Error fitting on tau sampling points', status_c)
  ENDIF
END SUBROUTINE

SUBROUTINE fit_tau_dd_5d(obj, target_dim, arr, res)
  TYPE(IR), intent(in) :: obj
  INTEGER, intent(in) :: target_dim
  REAL(KIND=DP), intent(in), TARGET :: arr (:,:,:,:,:)
  REAL(KIND=DP), INTENT(OUT), TARGET :: res (:,:,:,:,:)

  INTEGER(KIND=c_int) :: ndim_c, target_dim_c, status_c
  INTEGER(KIND=c_int), TARGET :: input_dims_c(5), output_dims_c(5)
  input_dims_c = SHAPE(arr)
  output_dims_c = SHAPE(res)
  ndim_c = 5
  IF (target_dim < 1 .or. target_dim > 5) THEN
    CALL errore('fit_tau_dd_5d', 'Target dimension is out of range', 1)
  ENDIF
  IF (input_dims_c(target_dim) /= obj%ntau) THEN
    CALL errore('fit_tau_dd_5d', 'Target dimension is not the same as the number of tau sampling points', 1)
  ENDIF
  IF (output_dims_c(target_dim) /= obj%size) THEN
    CALL errore('fit_tau_dd_5d', 'Target dimension is not the same as the basis size', 1)
  ENDIF
  IF (.NOT. check_output_dims(target_dim, input_dims_c, output_dims_c)) THEN
    CALL errore('fit_tau_dd_5d', &
        'Output dimensions are not the same as the input dimensions except for the TARGET dimension', 1)
  ENDIF
  target_dim_c = target_dim - 1
  
  status_c = c_spir_sampling_fit_dd(obj%tau_smpl_ptr, SPIR_ORDER_COLUMN_MAJOR, &
    ndim_c, c_loc(input_dims_c), target_dim_c, c_loc(arr), c_loc(res))
  IF (status_c /= 0) THEN
    CALL errore('fit_tau_dd_5d', 'Error fitting on tau sampling points', status_c)
  ENDIF
END SUBROUTINE

SUBROUTINE fit_tau_dd_6d(obj, target_dim, arr, res)
  TYPE(IR), intent(in) :: obj
  INTEGER, intent(in) :: target_dim
  REAL(KIND=DP), intent(in), TARGET :: arr (:,:,:,:,:,:)
  REAL(KIND=DP), INTENT(OUT), TARGET :: res (:,:,:,:,:,:)

  INTEGER(KIND=c_int) :: ndim_c, target_dim_c, status_c
  INTEGER(KIND=c_int), TARGET :: input_dims_c(6), output_dims_c(6)
  input_dims_c = SHAPE(arr)
  output_dims_c = SHAPE(res)
  ndim_c = 6
  IF (target_dim < 1 .or. target_dim > 6) THEN
    CALL errore('fit_tau_dd_6d', 'Target dimension is out of range', 1)
  ENDIF
  IF (input_dims_c(target_dim) /= obj%ntau) THEN
    CALL errore('fit_tau_dd_6d', 'Target dimension is not the same as the number of tau sampling points', 1)
  ENDIF
  IF (output_dims_c(target_dim) /= obj%size) THEN
    CALL errore('fit_tau_dd_6d', 'Target dimension is not the same as the basis size', 1)
  ENDIF
  IF (.NOT. check_output_dims(target_dim, input_dims_c, output_dims_c)) THEN
    CALL errore('fit_tau_dd_6d', &
        'Output dimensions are not the same as the input dimensions except for the TARGET dimension', 1)
  ENDIF
  target_dim_c = target_dim - 1
  
  status_c = c_spir_sampling_fit_dd(obj%tau_smpl_ptr, SPIR_ORDER_COLUMN_MAJOR, &
    ndim_c, c_loc(input_dims_c), target_dim_c, c_loc(arr), c_loc(res))
  IF (status_c /= 0) THEN
    CALL errore('fit_tau_dd_6d', 'Error fitting on tau sampling points', status_c)
  ENDIF
END SUBROUTINE

SUBROUTINE fit_tau_dd_7d(obj, target_dim, arr, res)
  TYPE(IR), intent(in) :: obj
  INTEGER, intent(in) :: target_dim
  REAL(KIND=DP), intent(in), TARGET :: arr (:,:,:,:,:,:,:)
  REAL(KIND=DP), INTENT(OUT), TARGET :: res (:,:,:,:,:,:,:)

  INTEGER(KIND=c_int) :: ndim_c, target_dim_c, status_c
  INTEGER(KIND=c_int), TARGET :: input_dims_c(7), output_dims_c(7)
  input_dims_c = SHAPE(arr)
  output_dims_c = SHAPE(res)
  ndim_c = 7
  IF (target_dim < 1 .or. target_dim > 7) THEN
    CALL errore('fit_tau_dd_7d', 'Target dimension is out of range', 1)
  ENDIF
  IF (input_dims_c(target_dim) /= obj%ntau) THEN
    CALL errore('fit_tau_dd_7d', 'Target dimension is not the same as the number of tau sampling points', 1)
  ENDIF
  IF (output_dims_c(target_dim) /= obj%size) THEN
    CALL errore('fit_tau_dd_7d', 'Target dimension is not the same as the basis size', 1)
  ENDIF
  IF (.NOT. check_output_dims(target_dim, input_dims_c, output_dims_c)) THEN
    CALL errore('fit_tau_dd_7d', &
        'Output dimensions are not the same as the input dimensions except for the TARGET dimension', 1)
  ENDIF
  target_dim_c = target_dim - 1
  
  status_c = c_spir_sampling_fit_dd(obj%tau_smpl_ptr, SPIR_ORDER_COLUMN_MAJOR, &
    ndim_c, c_loc(input_dims_c), target_dim_c, c_loc(arr), c_loc(res))
  IF (status_c /= 0) THEN
    CALL errore('fit_tau_dd_7d', 'Error fitting on tau sampling points', status_c)
  ENDIF
END SUBROUTINE

SUBROUTINE fit_tau_zz_1d(obj, target_dim, arr, res)
  TYPE(IR), intent(in) :: obj
  INTEGER, intent(in) :: target_dim
  COMPLEX(KIND=DP), intent(in), TARGET :: arr (:)
  COMPLEX(KIND=DP), INTENT(OUT), TARGET :: res (:)

  INTEGER(KIND=c_int) :: ndim_c, target_dim_c, status_c
  INTEGER(KIND=c_int), TARGET :: input_dims_c(1), output_dims_c(1)
  input_dims_c = SHAPE(arr)
  output_dims_c = SHAPE(res)
  ndim_c = 1
  IF (target_dim < 1 .or. target_dim > 1) THEN
    CALL errore('fit_tau_zz_1d', 'Target dimension is out of range', 1)
  ENDIF
  IF (input_dims_c(target_dim) /= obj%ntau) THEN
    CALL errore('fit_tau_zz_1d', 'Target dimension is not the same as the number of tau sampling points', 1)
  ENDIF
  IF (output_dims_c(target_dim) /= obj%size) THEN
    CALL errore('fit_tau_zz_1d', 'Target dimension is not the same as the basis size', 1)
  ENDIF
  IF (.NOT. check_output_dims(target_dim, input_dims_c, output_dims_c)) THEN
    CALL errore('fit_tau_zz_1d', &
        'Output dimensions are not the same as the input dimensions except for the TARGET dimension', 1)
  ENDIF
  target_dim_c = target_dim - 1
  
  status_c = c_spir_sampling_fit_zz(obj%tau_smpl_ptr, SPIR_ORDER_COLUMN_MAJOR, &
    ndim_c, c_loc(input_dims_c), target_dim_c, c_loc(arr), c_loc(res))
  IF (status_c /= 0) THEN
    CALL errore('fit_tau_zz_1d', 'Error fitting on tau sampling points', status_c)
  ENDIF
END SUBROUTINE

SUBROUTINE fit_tau_zz_2d(obj, target_dim, arr, res)
  TYPE(IR), intent(in) :: obj
  INTEGER, intent(in) :: target_dim
  COMPLEX(KIND=DP), intent(in), TARGET :: arr (:,:)
  COMPLEX(KIND=DP), INTENT(OUT), TARGET :: res (:,:)

  INTEGER(KIND=c_int) :: ndim_c, target_dim_c, status_c
  INTEGER(KIND=c_int), TARGET :: input_dims_c(2), output_dims_c(2)
  input_dims_c = SHAPE(arr)
  output_dims_c = SHAPE(res)
  ndim_c = 2
  IF (target_dim < 1 .or. target_dim > 2) THEN
    CALL errore('fit_tau_zz_2d', 'Target dimension is out of range', 1)
  ENDIF
  IF (input_dims_c(target_dim) /= obj%ntau) THEN
    CALL errore('fit_tau_zz_2d', 'Target dimension is not the same as the number of tau sampling points', 1)
  ENDIF
  IF (output_dims_c(target_dim) /= obj%size) THEN
    CALL errore('fit_tau_zz_2d', 'Target dimension is not the same as the basis size', 1)
  ENDIF
  IF (.NOT. check_output_dims(target_dim, input_dims_c, output_dims_c)) THEN
    CALL errore('fit_tau_zz_2d', &
        'Output dimensions are not the same as the input dimensions except for the TARGET dimension', 1)
  ENDIF
  target_dim_c = target_dim - 1
  
  status_c = c_spir_sampling_fit_zz(obj%tau_smpl_ptr, SPIR_ORDER_COLUMN_MAJOR, &
    ndim_c, c_loc(input_dims_c), target_dim_c, c_loc(arr), c_loc(res))
  IF (status_c /= 0) THEN
    CALL errore('fit_tau_zz_2d', 'Error fitting on tau sampling points', status_c)
  ENDIF
END SUBROUTINE

SUBROUTINE fit_tau_zz_3d(obj, target_dim, arr, res)
  TYPE(IR), intent(in) :: obj
  INTEGER, intent(in) :: target_dim
  COMPLEX(KIND=DP), intent(in), TARGET :: arr (:,:,:)
  COMPLEX(KIND=DP), INTENT(OUT), TARGET :: res (:,:,:)

  INTEGER(KIND=c_int) :: ndim_c, target_dim_c, status_c
  INTEGER(KIND=c_int), TARGET :: input_dims_c(3), output_dims_c(3)
  input_dims_c = SHAPE(arr)
  output_dims_c = SHAPE(res)
  ndim_c = 3
  IF (target_dim < 1 .or. target_dim > 3) THEN
    CALL errore('fit_tau_zz_3d', 'Target dimension is out of range', 1)
  ENDIF
  IF (input_dims_c(target_dim) /= obj%ntau) THEN
    CALL errore('fit_tau_zz_3d', 'Target dimension is not the same as the number of tau sampling points', 1)
  ENDIF
  IF (output_dims_c(target_dim) /= obj%size) THEN
    CALL errore('fit_tau_zz_3d', 'Target dimension is not the same as the basis size', 1)
  ENDIF
  IF (.NOT. check_output_dims(target_dim, input_dims_c, output_dims_c)) THEN
    CALL errore('fit_tau_zz_3d', &
        'Output dimensions are not the same as the input dimensions except for the TARGET dimension', 1)
  ENDIF
  target_dim_c = target_dim - 1
  
  status_c = c_spir_sampling_fit_zz(obj%tau_smpl_ptr, SPIR_ORDER_COLUMN_MAJOR, &
    ndim_c, c_loc(input_dims_c), target_dim_c, c_loc(arr), c_loc(res))
  IF (status_c /= 0) THEN
    CALL errore('fit_tau_zz_3d', 'Error fitting on tau sampling points', status_c)
  ENDIF
END SUBROUTINE

SUBROUTINE fit_tau_zz_4d(obj, target_dim, arr, res)
  TYPE(IR), intent(in) :: obj
  INTEGER, intent(in) :: target_dim
  COMPLEX(KIND=DP), intent(in), TARGET :: arr (:,:,:,:)
  COMPLEX(KIND=DP), INTENT(OUT), TARGET :: res (:,:,:,:)

  INTEGER(KIND=c_int) :: ndim_c, target_dim_c, status_c
  INTEGER(KIND=c_int), TARGET :: input_dims_c(4), output_dims_c(4)
  input_dims_c = SHAPE(arr)
  output_dims_c = SHAPE(res)
  ndim_c = 4
  IF (target_dim < 1 .or. target_dim > 4) THEN
    CALL errore('fit_tau_zz_4d', 'Target dimension is out of range', 1)
  ENDIF
  IF (input_dims_c(target_dim) /= obj%ntau) THEN
    CALL errore('fit_tau_zz_4d', 'Target dimension is not the same as the number of tau sampling points', 1)
  ENDIF
  IF (output_dims_c(target_dim) /= obj%size) THEN
    CALL errore('fit_tau_zz_4d', 'Target dimension is not the same as the basis size', 1)
  ENDIF
  IF (.NOT. check_output_dims(target_dim, input_dims_c, output_dims_c)) THEN
    CALL errore('fit_tau_zz_4d', &
        'Output dimensions are not the same as the input dimensions except for the TARGET dimension', 1)
  ENDIF
  target_dim_c = target_dim - 1
  
  status_c = c_spir_sampling_fit_zz(obj%tau_smpl_ptr, SPIR_ORDER_COLUMN_MAJOR, &
    ndim_c, c_loc(input_dims_c), target_dim_c, c_loc(arr), c_loc(res))
  IF (status_c /= 0) THEN
    CALL errore('fit_tau_zz_4d', 'Error fitting on tau sampling points', status_c)
  ENDIF
END SUBROUTINE

SUBROUTINE fit_tau_zz_5d(obj, target_dim, arr, res)
  TYPE(IR), intent(in) :: obj
  INTEGER, intent(in) :: target_dim
  COMPLEX(KIND=DP), intent(in), TARGET :: arr (:,:,:,:,:)
  COMPLEX(KIND=DP), INTENT(OUT), TARGET :: res (:,:,:,:,:)

  INTEGER(KIND=c_int) :: ndim_c, target_dim_c, status_c
  INTEGER(KIND=c_int), TARGET :: input_dims_c(5), output_dims_c(5)
  input_dims_c = SHAPE(arr)
  output_dims_c = SHAPE(res)
  ndim_c = 5
  IF (target_dim < 1 .or. target_dim > 5) THEN
    CALL errore('fit_tau_zz_5d', 'Target dimension is out of range', 1)
  ENDIF
  IF (input_dims_c(target_dim) /= obj%ntau) THEN
    CALL errore('fit_tau_zz_5d', 'Target dimension is not the same as the number of tau sampling points', 1)
  ENDIF
  IF (output_dims_c(target_dim) /= obj%size) THEN
    CALL errore('fit_tau_zz_5d', 'Target dimension is not the same as the basis size', 1)
  ENDIF
  IF (.NOT. check_output_dims(target_dim, input_dims_c, output_dims_c)) THEN
    CALL errore('fit_tau_zz_5d', &
        'Output dimensions are not the same as the input dimensions except for the TARGET dimension', 1)
  ENDIF
  target_dim_c = target_dim - 1
  
  status_c = c_spir_sampling_fit_zz(obj%tau_smpl_ptr, SPIR_ORDER_COLUMN_MAJOR, &
    ndim_c, c_loc(input_dims_c), target_dim_c, c_loc(arr), c_loc(res))
  IF (status_c /= 0) THEN
    CALL errore('fit_tau_zz_5d', 'Error fitting on tau sampling points', status_c)
  ENDIF
END SUBROUTINE

SUBROUTINE fit_tau_zz_6d(obj, target_dim, arr, res)
  TYPE(IR), intent(in) :: obj
  INTEGER, intent(in) :: target_dim
  COMPLEX(KIND=DP), intent(in), TARGET :: arr (:,:,:,:,:,:)
  COMPLEX(KIND=DP), INTENT(OUT), TARGET :: res (:,:,:,:,:,:)

  INTEGER(KIND=c_int) :: ndim_c, target_dim_c, status_c
  INTEGER(KIND=c_int), TARGET :: input_dims_c(6), output_dims_c(6)
  input_dims_c = SHAPE(arr)
  output_dims_c = SHAPE(res)
  ndim_c = 6
  IF (target_dim < 1 .or. target_dim > 6) THEN
    CALL errore('fit_tau_zz_6d', 'Target dimension is out of range', 1)
  ENDIF
  IF (input_dims_c(target_dim) /= obj%ntau) THEN
    CALL errore('fit_tau_zz_6d', 'Target dimension is not the same as the number of tau sampling points', 1)
  ENDIF
  IF (output_dims_c(target_dim) /= obj%size) THEN
    CALL errore('fit_tau_zz_6d', 'Target dimension is not the same as the basis size', 1)
  ENDIF
  IF (.NOT. check_output_dims(target_dim, input_dims_c, output_dims_c)) THEN
    CALL errore('fit_tau_zz_6d', &
        'Output dimensions are not the same as the input dimensions except for the TARGET dimension', 1)
  ENDIF
  target_dim_c = target_dim - 1
  
  status_c = c_spir_sampling_fit_zz(obj%tau_smpl_ptr, SPIR_ORDER_COLUMN_MAJOR, &
    ndim_c, c_loc(input_dims_c), target_dim_c, c_loc(arr), c_loc(res))
  IF (status_c /= 0) THEN
    CALL errore('fit_tau_zz_6d', 'Error fitting on tau sampling points', status_c)
  ENDIF
END SUBROUTINE

SUBROUTINE fit_tau_zz_7d(obj, target_dim, arr, res)
  TYPE(IR), intent(in) :: obj
  INTEGER, intent(in) :: target_dim
  COMPLEX(KIND=DP), intent(in), TARGET :: arr (:,:,:,:,:,:,:)
  COMPLEX(KIND=DP), INTENT(OUT), TARGET :: res (:,:,:,:,:,:,:)

  INTEGER(KIND=c_int) :: ndim_c, target_dim_c, status_c
  INTEGER(KIND=c_int), TARGET :: input_dims_c(7), output_dims_c(7)
  input_dims_c = SHAPE(arr)
  output_dims_c = SHAPE(res)
  ndim_c = 7
  IF (target_dim < 1 .or. target_dim > 7) THEN
    CALL errore('fit_tau_zz_7d', 'Target dimension is out of range', 1)
  ENDIF
  IF (input_dims_c(target_dim) /= obj%ntau) THEN
    CALL errore('fit_tau_zz_7d', 'Target dimension is not the same as the number of tau sampling points', 1)
  ENDIF
  IF (output_dims_c(target_dim) /= obj%size) THEN
    CALL errore('fit_tau_zz_7d', 'Target dimension is not the same as the basis size', 1)
  ENDIF
  IF (.NOT. check_output_dims(target_dim, input_dims_c, output_dims_c)) THEN
    CALL errore('fit_tau_zz_7d', &
        'Output dimensions are not the same as the input dimensions except for the TARGET dimension', 1)
  ENDIF
  target_dim_c = target_dim - 1
  
  status_c = c_spir_sampling_fit_zz(obj%tau_smpl_ptr, SPIR_ORDER_COLUMN_MAJOR, &
    ndim_c, c_loc(input_dims_c), target_dim_c, c_loc(arr), c_loc(res))
  IF (status_c /= 0) THEN
    CALL errore('fit_tau_zz_7d', 'Error fitting on tau sampling points', status_c)
  ENDIF
END SUBROUTINE
