#!/usr/bin/env python3
"""
Auto-generate evaluate_tau_impl.inc file for Fortran module.

This script generates evaluate_tau functions for 1d to 7d arrays
based on the template in tmp.f90.
"""

import os

def generate_shape_string(ndim):
    """Generate shape string for given dimension."""
    if ndim == 1:
        return "(:)"
    elif ndim == 2:
        return "(:,:)"
    elif ndim == 3:
        return "(:,:,:)"
    elif ndim == 4:
        return "(:,:,:,:)"
    elif ndim == 5:
        return "(:,:,:,:,:)"
    elif ndim == 6:
        return "(:,:,:,:,:,:)"
    elif ndim == 7:
        return "(:,:,:,:,:,:,:)"
    else:
        raise ValueError(f"Unsupported dimension: {ndim}")

def generate_evaluate_tau_function(ndim):
    """Generate evaluate_tau_zz function for given dimension."""
    shape_str = generate_shape_string(ndim)
    
    # Generate dimension array declaration
    dim_array_decl = f"INTEGER(KIND=c_int), TARGET :: input_dims_c({ndim}), output_dims_c({ndim})"
    
    # Generate the function
    function = f"""SUBROUTINE evaluate_tau_zz_{ndim}d(obj, target_dim, arr, res)
  TYPE(IR), INTENT(IN) :: obj
  INTEGER, INTENT(IN) :: target_dim
  COMPLEX(KIND=DP), INTENT(IN) :: arr {shape_str}
  COMPLEX(KIND=DP), INTENT(OUT) :: res {shape_str}
  COMPLEX(KIND=c_double), ALLOCATABLE, TARGET :: arr_c{shape_str}, res_c{shape_str}

  INTEGER(KIND=c_int) :: ndim_c, target_dim_c, status_c
  {dim_array_decl}
  input_dims_c = SHAPE(arr)
  output_dims_c = SHAPE(res)
  ndim_c = {ndim}
  IF (target_dim < 1 .or. target_dim > {ndim}) THEN
    CALL errore('evaluate_tau_zz_{ndim}d', 'Target dimension is out of range', 1)
  ENDIF
  IF (input_dims_c(target_dim) /= obj%size) THEN
    CALL errore('evaluate_tau_zz_{ndim}d', 'Target dimension is not the same as the basis size', 1)
  ENDIF
  IF (output_dims_c(target_dim) /= obj%ntau) THEN
    CALL errore('evaluate_tau_zz_{ndim}d', 'Target dimension is not the same as the number of tau sampling points', 1)
  ENDIF
  IF (.NOT. check_output_dims(target_dim, input_dims_c, output_dims_c)) THEN
    CALL errore('evaluate_tau_zz_{ndim}d', &
        'Output dimensions are not the same as the input dimensions except for the TARGET dimension', 1)
  ENDIF
  target_dim_c = target_dim - 1

  ALLOCATE(arr_c, MOLD=arr)
  arr_c = arr
  ALLOCATE(res_c, MOLD=res)
  status_c = c_spir_sampling_eval_zz(obj%tau_smpl_ptr, SPIR_ORDER_COLUMN_MAJOR, &
    ndim_c, c_loc(input_dims_c), target_dim_c, c_loc(arr_c), c_loc(res_c))
  IF (status_c /= 0) THEN
    CALL errore('evaluate_tau_zz_{ndim}d', 'Error evaluating on tau sampling points', status_c)
  ENDIF
  res = res_c
  DEALLOCATE(arr_c, res_c)

END SUBROUTINE"""
    
    return function

def generate_all_functions():
    """Generate all evaluate_tau functions for 1d to 7d."""
    content = []
    
    # Header comment
    content.append("! Auto-generated file - do not edit manually")
    content.append("! Generated by generate_evaluate_tau.py")
    content.append("! Based on template from tmp.f90")
    content.append("")
    
    # Generate functions for each dimension
    for ndim in range(1, 8):  # 1d to 7d
        function = generate_evaluate_tau_function(ndim)
        content.append(function)
        content.append("")
    
    return "\n".join(content)

def main():
    """Main function to generate the file."""
    output_file = "evaluate_tau_impl.inc"
    
    print(f"Generating {output_file}...")
    
    content = generate_all_functions()
    
    # Write to file
    with open(output_file, 'w') as f:
        f.write(content)
    
    print(f"Successfully generated {output_file}")
    print(f"Total lines: {len(content.splitlines())}")
    print(f"Generated functions for dimensions: 1d to 7d")

if __name__ == "__main__":
    main()
