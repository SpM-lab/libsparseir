#!/usr/bin/env python3
"""
Auto-generate sparseir_ext_func_impl.inc file for Fortran module.

This script generates the implementation includes for all function variants
in the sparseir_ext module, reducing code duplication and maintenance burden.
"""

import os

def generate_shape_string(ndim):
    """Generate shape string for given dimension."""
    if ndim == 1:
        return "(:)"
    elif ndim == 2:
        return "(:,:)"
    elif ndim == 3:
        return "(:,:,:)"
    elif ndim == 4:
        return "(:,:,:,:)"
    elif ndim == 5:
        return "(:,:,:,:,:)"
    elif ndim == 6:
        return "(:,:,:,:,:,:)"
    elif ndim == 7:
        return "(:,:,:,:,:,:,:)"
    else:
        raise ValueError(f"Unsupported dimension: {ndim}")

def generate_function_block(func_name, ndim, shape_str, type_macro, impl_file):
    """Generate a single function block."""
    return f"""#define NAME {func_name}
#define NDIM {ndim}
#define SHAPE_ {shape_str}
#define {type_macro}
#include "{impl_file}"
#undef NAME
#undef NDIM
#undef SHAPE_
#undef {type_macro}
!"""

def generate_all_functions():
    """Generate all function implementations."""
    content = []
    
    # Header comment
    content.append("! Auto-generated file - do not edit manually")
    content.append("! Generated by generate_sparseir_ext_func_impl.py")
    content.append("")
    
    # Function definitions
    functions = [
        # evaluate_tau functions
        ("evaluate_tau", "evaluate_tau_impl.fh", [
            ("zz", "ZZ"),
            ("dd", "DD"), 
            ("dz", "DZ")
        ]),
        
        # evaluate_matsubara functions
        ("evaluate_matsubara", "evaluate_matsubara_impl.fh", [
            ("zz", "ZZ"),
            ("dz", "DZ")
        ]),
        
        # fit_tau functions
        ("fit_tau", "fit_tau_impl.fh", [
            ("zz", "ZZ"),
            ("dz", "DZ"),
            ("zd", "ZD"),
            ("dd", "DD")
        ]),
        
        # fit_matsubara functions
        ("fit_matsubara", "fit_matsubara_impl.fh", [
            ("zz", "ZZ"),
            ("dz", "DZ"),
            ("zd", "ZD"),
            ("dd", "DD")
        ]),
        
        # ir2dlr functions
        ("ir2dlr", "ir2dlr_impl.fh", [
            ("zz", "ZZ"),
            ("dz", "DZ"),
            ("zd", "ZD"),
            ("dd", "DD")
        ]),
        
        # dlr2ir functions
        ("dlr2ir", "dlr2ir_impl.fh", [
            ("zz", "ZZ"),
            ("dz", "DZ"),
            ("zd", "ZD"),
            ("dd", "DD")
        ])
    ]
    
    # Generate all function blocks
    for func_base, impl_file, type_variants in functions:
        for type_suffix, type_macro in type_variants:
            for ndim in range(1, 8):  # 1d to 7d
                func_name = f"{func_base}_{type_suffix}_{ndim}d"
                shape_str = generate_shape_string(ndim)
                
                block = generate_function_block(func_name, ndim, shape_str, type_macro, impl_file)
                content.append(block)
                content.append("")
    
    return "\n".join(content)

def main():
    """Main function to generate the file."""
    output_file = "sparseir_ext_func_impl.inc"
    
    print(f"Generating {output_file}...")
    
    content = generate_all_functions()
    
    # Write to file
    with open(output_file, 'w') as f:
        f.write(content)
    
    print(f"Successfully generated {output_file}")
    print(f"Total lines: {len(content.splitlines())}")

if __name__ == "__main__":
    main()
