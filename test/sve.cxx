// sparseir/tests/sve.cpp

#include <Eigen/Dense>
#include <algorithm>
#include <catch2/catch_test_macros.hpp>
#include <cstdint>
#include <map>
#include <numeric>
#include <vector>

#include <sparseir/sparseir.hpp>
#include <xprec/ddouble-header-only.hpp>

using std::invalid_argument;

TEST_CASE("sve_result.u(x)", "[sve]") {
    /*
    # Julia implementation
    begin
        Λ = 10.
        sve_result = SparseIR.SVEResult(LogisticKernel(Λ), ε=1e-15)
        u0 = sve_result.u[begin]
        x = 0.3
        u0(x)
    end
    */
    double beta = 1.0;
    double lambda = 10.0;
    auto kernel = sparseir::LogisticKernel(lambda);
    auto sve_result = sparseir::compute_sve(kernel, 1e-15);
    double x = 0.3;
    auto u0 = (*sve_result.u)[0];
    auto u0x = u0(x);
    REQUIRE(u0.l == 0);
    REQUIRE(u0.symm == 1);
    REQUIRE(u0.polyorder == 16);
    REQUIRE(u0.xmin == -1.0);
    REQUIRE(u0.xmax == 1.0);
    REQUIRE(u0.xm.size() == 30);
    REQUIRE(u0.inv_xs.size() == 30);
    REQUIRE(u0.norms.size() == 30);
    std::vector<double> u0_data_vec = {
        0.1306343289249387,
        -0.003088620328392153,
        4.332434116041884e-5,
        -4.051803535484306e-7,
        3.0294780746417638e-9,
        -1.8454824890861207e-11,
        9.593259697606462e-14,
        -4.318378229918751e-16,
        -1.6057152611363738e-17,
        8.034298644739209e-19,
        -5.215449610952754e-17,
        1.6770637398117038e-18,
        -9.088555845096977e-17,
        1.3601547584026748e-18,
        -2.1290268153903202e-17,
        2.2812299069925636e-19,
        0.133117010114246,
        -0.0034677634482834954,
        5.524039190213751e-5,
        -5.852928194892295e-7,
        4.992377187882264e-9,
        -3.470094120915678e-11,
        2.0626937965651714e-13,
        -1.0621125444648503e-15,
        -1.327011574477474e-17,
        8.891860052322482e-19,
        -5.3150032070815465e-17,
        1.8829704560145743e-18,
        -9.261720518028769e-17,
        1.5271597311845498e-18,
        -2.1698376474365316e-17,
        2.5619103723903433e-19,
        0.1348677927781422,
        -0.0038359347262132584,
        6.91944672290212e-5,
        -8.268613421443971e-7,
        8.024718568697224e-9,
        -6.345427395840508e-11,
        4.3032181031196856e-13,
        -2.5281727376047486e-15,
        -5.1747925868067095e-18,
        9.440394707282658e-19,
        -5.3854136235768805e-17,
        2.0829380040824132e-18,
        -9.384055332144593e-17,
        1.6893519670818779e-18,
        -2.1987920900745524e-17,
        2.8347999649558843e-19,
        0.13583520528428533,
        -0.004171580503739914,
        8.493448081651559e-5,
        -1.138085125623402e-6,
        1.2526233369579828e-8,
        -1.122452205822655e-10,
        8.659014584499268e-13,
        -5.785591933646663e-15,
        1.587938940904511e-17,
        9.109693637060432e-19,
        -5.4245865298256037e-17,
        2.2652649115211116e-18,
        -9.451970000002734e-17,
        1.8372430819635655e-18,
        -2.2150439035417448e-17,
        3.084034195336992e-19,
        0.13600309349640446,
        -0.004449238725087478,
        0.00010188835454079239,
        -1.519447054286535e-6,
        1.889170501672303e-8,
        -1.9087128529968257e-10,
        1.668854643854283e-12,
        -1.2627907764313899e-14,
        6.665421392806912e-17,
        6.530289128320217e-19,
        -5.431766546550717e-17,
        2.416121691783754e-18,
        -9.464318251380017e-17,
        1.9596213517746516e-18,
        -2.218312002743061e-17,
        3.290826047521968e-19,
        0.13539867705132935,
        -0.004641176436720682,
        0.00011912116720466503,
        -1.957779132706826e-6,
        2.7370414622389277e-8,
        -3.097334872911258e-10,
        3.0555739278178214e-12,
        -2.6039961676418555e-14,
        1.8009454727178994e-16,
        -1.3416575385737644e-19,
        -5.40777083077729e-17,
        2.520431207688298e-18,
        -9.422956521670746e-17,
        2.044270970118777e-18,
        -2.2090103166217916e-17,
        3.434644834131977e-19,
        0.13409715895853275,
        -0.004719986969004002,
        0.00013536907031716337,
        -2.420436638151997e-6,
        3.785300630728854e-8,
        -4.755666885288881e-10,
        5.265379848297904e-12,
        -5.0169717001576626e-14,
        4.118401065780764e-16,
        -2.0446457822121647e-18,
        -5.35501633054833e-17,
        2.5632616361585686e-18,
        -9.33306591515526e-17,
        2.0791139201621523e-18,
        -2.1883239227246204e-17,
        3.4951037695345937e-19,
        0.13222103792506845,
        -0.004661940139242021,
        0.00014918832923537266,
        -2.852394734987402e-6,
        4.964092300409242e-8,
        -6.841888454869215e-10,
        8.45142444088915e-12,
        -8.915612056827141e-14,
        8.362314469143777e-16,
        -6.0234895174712546e-18,
        -5.277316485609017e-17,
        2.5316204613489296e-18,
        -9.203110228857883e-17,
        2.053684309629933e-18,
        -2.1582025252842366e-17,
        3.4544177495993926e-19,
        0.1299329360557847,
        -0.0044505687852619,
        0.00015923080726201497,
        -3.1799170775970573e-6,
        6.133479591365844e-8,
        -9.121828673040286e-10,
        1.249871300365485e-11,
        -1.4402027451892738e-13,
        1.5147956156101485e-15,
        -1.3107025245287422e-17,
        -5.179657846894099e-17,
        2.416391390722045e-18,
        -9.044347906363985e-17,
        1.9607087542271804e-18,
        -2.1212523005683314e-17,
        3.300068208808041e-19,
        0.12742205869276685,
        -0.004079739261690625,
        0.00016460133801271778,
        -3.323384001363083e-6,
        7.102844349567234e-8,
        -1.1129202291336217e-9,
        1.6854888730035335e-11,
        -2.0802811534878425e-13,
        2.4289300367321258e-15,
        -2.35162299615964e-17,
        -5.068452880161132e-17,
        2.214070031982241e-18,
        -8.869904343539805e-17,
        1.797462302645294e-18,
        -2.080526618099368e-17,
        3.0271327424360563e-19,
        0.12488604691311368,
        -0.0035554511594525565,
        0.0001651837328374035,
        -3.2179846422232465e-6,
        7.691267497167832e-8,
        -1.2240947764811543e-9,
        2.0562588873292238e-11,
        -2.6368003120635255e-13,
        3.4125649732034824e-15,
        -3.525694467765447e-17,
        -4.9524847106933214e-17,
        1.927953455490532e-18,
        -8.69352262317446e-17,
        1.566567186371069e-18,
        -2.039240753381822e-17,
        2.639716125971533e-19,
        0.12251133488059741,
        -0.0028959196219000448,
        0.00016178189481639923,
        -2.8354837701945592e-6,
        7.811993243177101e-8,
        -1.1893726727069478e-9,
        2.2651634863163037e-11,
        -2.864356292789231e-13,
        4.17643217199609e-15,
        -4.3530851579701145e-17,
        -4.8432887661721154e-17,
        1.568435980322896e-18,
        -8.528203040124262e-17,
        1.2760356815022537e-18,
        -2.0004564431181052e-17,
        2.151119394338036e-19,
        0.12045550335931388,
        -0.0021299971737511955,
        0.00015595793131832877,
        -2.1971718263068114e-6,
        7.531412168714067e-8,
        -9.855388935566871e-10,
        2.275227647285319e-11,
        -2.5684758474727664e-13,
        4.4812639187570635e-15,
        -4.271913858540445e-17,
        -4.752579106509054e-17,
        1.1520658876395328e-18,
        -8.384969222532824e-17,
        9.385791170908876e-19,
        -1.9667894078773607e-17,
        1.5827397556551558e-19,
        0.11883426988578132,
        -0.0012944145276902674,
        0.00014957121718186817,
        -1.371361155558782e-6,
        7.049246064311859e-8,
        -6.381023775808443e-10,
        2.1419621010469043e-11,
        -1.740303200914425e-13,
        4.337356464969145e-15,
        -3.051082300661339e-17,
        -4.6871616133348213e-17,
        6.99397965248822e-19,
        -8.271944407490659e-17,
        5.703920911526572e-19,
        -1.940182948222789e-17,
        9.620220822710325e-20,
        0.11771412671520903,
        -0.0004304408867896644,
        0.00014417587775830828,
        -4.572235733754134e-7,
        6.593973286016377e-8,
        -2.1435848824301272e-10,
        1.9738899595315872e-11,
        -5.917713099809887e-14,
        3.988701201825088e-15,
        -1.0536464222579925e-17,
        -4.6468226059630736e-17,
        2.3250576202408365e-19,
        -8.19381504674851e-17,
        1.8967689986618523e-19,
        -1.9217690339092148e-17,
        3.199140100593713e-20,
        0.11771412671520903,
        0.0004304408867896644,
        0.00014417587775830828,
        4.572235733754134e-7,
        6.593973286016377e-8,
        2.1435848824301272e-10,
        1.9738899595315872e-11,
        5.917713099809887e-14,
        3.988701201825088e-15,
        1.0536464222579925e-17,
        -4.6468226059630736e-17,
        -2.3250576202408365e-19,
        -8.19381504674851e-17,
        -1.8967689986618523e-19,
        -1.9217690339092148e-17,
        -3.199140100593713e-20,
        0.11883426988578132,
        0.0012944145276902674,
        0.00014957121718186817,
        1.371361155558782e-6,
        7.049246064311859e-8,
        6.381023775808443e-10,
        2.1419621010469043e-11,
        1.740303200914425e-13,
        4.337356464969145e-15,
        3.051082300661339e-17,
        -4.6871616133348213e-17,
        -6.99397965248822e-19,
        -8.271944407490659e-17,
        -5.703920911526572e-19,
        -1.940182948222789e-17,
        -9.620220822710325e-20,
        0.12045550335931388,
        0.0021299971737511955,
        0.00015595793131832877,
        2.1971718263068114e-6,
        7.531412168714067e-8,
        9.855388935566871e-10,
        2.275227647285319e-11,
        2.5684758474727664e-13,
        4.4812639187570635e-15,
        4.271913858540445e-17,
        -4.752579106509054e-17,
        -1.1520658876395328e-18,
        -8.384969222532824e-17,
        -9.385791170908876e-19,
        -1.9667894078773607e-17,
        -1.5827397556551558e-19,
        0.12251133488059741,
        0.0028959196219000448,
        0.00016178189481639923,
        2.8354837701945592e-6,
        7.811993243177101e-8,
        1.1893726727069478e-9,
        2.2651634863163037e-11,
        2.864356292789231e-13,
        4.17643217199609e-15,
        4.3530851579701145e-17,
        -4.8432887661721154e-17,
        -1.568435980322896e-18,
        -8.528203040124262e-17,
        -1.2760356815022537e-18,
        -2.0004564431181052e-17,
        -2.151119394338036e-19,
        0.12488604691311368,
        0.0035554511594525565,
        0.0001651837328374035,
        3.2179846422232465e-6,
        7.691267497167832e-8,
        1.2240947764811543e-9,
        2.0562588873292238e-11,
        2.6368003120635255e-13,
        3.4125649732034824e-15,
        3.525694467765447e-17,
        -4.9524847106933214e-17,
        -1.927953455490532e-18,
        -8.69352262317446e-17,
        -1.566567186371069e-18,
        -2.039240753381822e-17,
        -2.639716125971533e-19,
        0.12742205869276685,
        0.004079739261690625,
        0.00016460133801271778,
        3.323384001363083e-6,
        7.102844349567234e-8,
        1.1129202291336217e-9,
        1.6854888730035335e-11,
        2.0802811534878425e-13,
        2.4289300367321258e-15,
        2.35162299615964e-17,
        -5.068452880161132e-17,
        -2.214070031982241e-18,
        -8.869904343539805e-17,
        -1.797462302645294e-18,
        -2.080526618099368e-17,
        -3.0271327424360563e-19,
        0.1299329360557847,
        0.0044505687852619,
        0.00015923080726201497,
        3.1799170775970573e-6,
        6.133479591365844e-8,
        9.121828673040286e-10,
        1.249871300365485e-11,
        1.4402027451892738e-13,
        1.5147956156101485e-15,
        1.3107025245287422e-17,
        -5.179657846894099e-17,
        -2.416391390722045e-18,
        -9.044347906363985e-17,
        -1.9607087542271804e-18,
        -2.1212523005683314e-17,
        -3.300068208808041e-19,
        0.13222103792506845,
        0.004661940139242021,
        0.00014918832923537266,
        2.852394734987402e-6,
        4.964092300409242e-8,
        6.841888454869215e-10,
        8.45142444088915e-12,
        8.915612056827141e-14,
        8.362314469143777e-16,
        6.0234895174712546e-18,
        -5.277316485609017e-17,
        -2.5316204613489296e-18,
        -9.203110228857883e-17,
        -2.053684309629933e-18,
        -2.1582025252842366e-17,
        -3.4544177495993926e-19,
        0.13409715895853275,
        0.004719986969004002,
        0.00013536907031716337,
        2.420436638151997e-6,
        3.785300630728854e-8,
        4.755666885288881e-10,
        5.265379848297904e-12,
        5.0169717001576626e-14,
        4.118401065780764e-16,
        2.0446457822121647e-18,
        -5.35501633054833e-17,
        -2.5632616361585686e-18,
        -9.33306591515526e-17,
        -2.0791139201621523e-18,
        -2.1883239227246204e-17,
        -3.4951037695345937e-19,
        0.13539867705132935,
        0.004641176436720682,
        0.00011912116720466503,
        1.957779132706826e-6,
        2.7370414622389277e-8,
        3.097334872911258e-10,
        3.0555739278178214e-12,
        2.6039961676418555e-14,
        1.8009454727178994e-16,
        1.3416575385737644e-19,
        -5.40777083077729e-17,
        -2.520431207688298e-18,
        -9.422956521670746e-17,
        -2.044270970118777e-18,
        -2.2090103166217916e-17,
        -3.434644834131977e-19,
        0.13600309349640446,
        0.004449238725087478,
        0.00010188835454079239,
        1.519447054286535e-6,
        1.889170501672303e-8,
        1.9087128529968257e-10,
        1.668854643854283e-12,
        1.2627907764313899e-14,
        6.665421392806912e-17,
        -6.530289128320217e-19,
        -5.431766546550717e-17,
        -2.416121691783754e-18,
        -9.464318251380017e-17,
        -1.9596213517746516e-18,
        -2.218312002743061e-17,
        -3.290826047521968e-19,
        0.13583520528428533,
        0.004171580503739914,
        8.493448081651559e-5,
        1.138085125623402e-6,
        1.2526233369579828e-8,
        1.122452205822655e-10,
        8.659014584499268e-13,
        5.785591933646663e-15,
        1.587938940904511e-17,
        -9.109693637060432e-19,
        -5.4245865298256037e-17,
        -2.2652649115211116e-18,
        -9.451970000002734e-17,
        -1.8372430819635655e-18,
        -2.2150439035417448e-17,
        -3.084034195336992e-19,
        0.1348677927781422,
        0.0038359347262132584,
        6.91944672290212e-5,
        8.268613421443971e-7,
        8.024718568697224e-9,
        6.345427395840508e-11,
        4.3032181031196856e-13,
        2.5281727376047486e-15,
        -5.1747925868067095e-18,
        -9.440394707282658e-19,
        -5.3854136235768805e-17,
        -2.0829380040824132e-18,
        -9.384055332144593e-17,
        -1.6893519670818779e-18,
        -2.1987920900745524e-17,
        -2.8347999649558843e-19,
        0.133117010114246,
        0.0034677634482834954,
        5.524039190213751e-5,
        5.852928194892295e-7,
        4.992377187882264e-9,
        3.470094120915678e-11,
        2.0626937965651714e-13,
        1.0621125444648503e-15,
        -1.327011574477474e-17,
        -8.891860052322482e-19,
        -5.3150032070815465e-17,
        -1.8829704560145743e-18,
        -9.261720518028769e-17,
        -1.5271597311845498e-18,
        -2.1698376474365316e-17,
        -2.5619103723903433e-19,
        0.1306343289249387,
        0.003088620328392153,
        4.332434116041884e-5,
        4.051803535484306e-7,
        3.0294780746417638e-9,
        1.8454824890861207e-11,
        9.593259697606462e-14,
        4.318378229918751e-16,
        -1.6057152611363738e-17,
        -8.034298644739209e-19,
        -5.215449610952754e-17,
        -1.6770637398117038e-18,
        -9.088555845096977e-17,
        -1.3601547584026748e-18,
        -2.1290268153903202e-17,
        -2.2812299069925636e-19,
    };
    Eigen::MatrixXd u0_data_mat_eigen = Eigen::Map<Eigen::MatrixXd>(u0_data_vec.data(), 16, 30);
    REQUIRE(u0.data.isApprox(u0_data_mat_eigen));

    std::vector<double> u0_knots_vec = {
        -1.0,
        -0.9727531075745336,
        -0.9415029241033912,
        -0.9057294475256112,
        -0.8648799904956732,
        -0.8183857400899177,
        -0.765689010728998,
        -0.7062843505970002,
        -0.6397759819345293,
        -0.5659517991284807,
        -0.4848695795895853,
        -0.3969439982150929,
        -0.3030147999753195,
        -0.20437073182586182,
        -0.10270598777737024,
        0.0,
        0.10270598777737024,
        0.20437073182586182,
        0.3030147999753195,
        0.3969439982150929,
        0.4848695795895853,
        0.5659517991284807,
        0.6397759819345293,
        0.7062843505970002,
        0.765689010728998,
        0.8183857400899177,
        0.8648799904956732,
        0.9057294475256112,
        0.9415029241033912,
        0.9727531075745336,
        1.0,
    };
    Eigen::VectorXd u0_knots_vec_eigen = Eigen::Map<Eigen::VectorXd>(u0_knots_vec.data(), u0_knots_vec.size());
    REQUIRE(u0_knots_vec_eigen.size() == u0.knots.size());
    REQUIRE(u0_knots_vec_eigen.isApprox(u0.knots));
}

// Function to check smoothness
void check_smooth(const std::function<double(double)> &u,
                  const std::vector<double> &s, double uscale,
                  double fudge_factor)
{
    /*
    double epsilon = std::numeric_limits<double>::epsilon();
    std::vector<double> knots = sparseir::knots(u);

    // Remove the first and last knots
    if (knots.size() <= 2) {
        REQUIRE(false); // Not enough knots to perform the test
    }
    knots.erase(knots.begin());
    knots.pop_back();

    std::vector<double> jump(knots.size());
    std::vector<double> compare_below(knots.size());
    std::vector<double> compare_above(knots.size());
    std::vector<double> compare(knots.size());

    for (size_t i = 0; i < knots.size(); ++i) {
        double x = knots[i];
        jump[i] = std::abs(u(x + epsilon) - u(x - epsilon));
        compare_below[i] = std::abs(u(x - epsilon) - u(x - 3 * epsilon));
        compare_above[i] = std::abs(u(x + 3 * epsilon) - u(x + epsilon));
        compare[i] = std::min(compare_below[i], compare_above[i]);
        compare[i] = std::max(compare[i], uscale * epsilon);
        // Loss of precision
        compare[i] *= fudge_factor * (s[0] / s[i]);
    }

    bool all_less = true;
    for (size_t i = 0; i < jump.size(); ++i) {
        if (!(jump[i] < compare[i])) {
            all_less = false;
            break;
        }
    }

    REQUIRE(all_less);
    */
}

template<typename T>
void
_test_sve() {
    auto lk = sparseir::LogisticKernel(10.0);
    REQUIRE(lk.is_centrosymmetric());
    REQUIRE(lk.lambda_ == 10.0);

    // Float64(sqrt(eps(SparseIR.Float64x2)))
    // sve_hints for small epsilon = 2.220446049250313e-16
    auto hints_small = sparseir::sve_hints<T>(lk, 2.220446049250313e-16);
    REQUIRE(hints_small.ngauss() == 16);

    // sve_hints for epsilon = 1e-6
    auto hints = sparseir::sve_hints<T>(lk, 1e-6);
    int nsvals_hint = hints.nsvals();
    int n_gauss = hints.ngauss();
    std::vector<T> segs_x = hints.segments_x();
    std::vector<T> segs_y = hints.segments_y();

    // Ensure `convert` is declared before this line
    auto rule_xprec_ddouble = sparseir::legendre(n_gauss);
    auto rule = sparseir::convert_rule<T>(rule_xprec_ddouble);

    sparseir::Rule<T> gauss_x = rule.piecewise(segs_x);
    sparseir::Rule<T> gauss_y = rule.piecewise(segs_y);
    auto ssve1 = sparseir::SamplingSVE<sparseir::LogisticKernel,T>(lk, 1e-6);
    REQUIRE(n_gauss == 10);
    REQUIRE(ssve1.n_gauss == n_gauss);

    auto ssve2 = sparseir::SamplingSVE<sparseir::LogisticKernel,T>(lk, 1e-6, 12);
    REQUIRE(ssve2.n_gauss == 12);

    auto ssve1_double =
        sparseir::SamplingSVE<sparseir::LogisticKernel, T>(lk, 1e-6);
    REQUIRE(ssve1_double.n_gauss == n_gauss);
    auto ssve2_double =
        sparseir::SamplingSVE<sparseir::LogisticKernel, T>(lk, 1e-6, 12);
    REQUIRE(ssve2_double.n_gauss == 12);
}

TEST_CASE("sve double DDouble", "[sve]")
{
    _test_sve<double>();
    _test_sve<xprec::DDouble>();
}


template<typename T>
void
_test_centrosymmsve() {
    auto lk = sparseir::LogisticKernel(10.0);
    auto hints = sparseir::sve_hints<T>(lk, 1e-6);
    int nsvals_hint = hints.nsvals();
    int n_gauss = hints.ngauss();
    std::vector<T> segs_x = hints.segments_x();
    std::vector<T> segs_y = hints.segments_y();

    auto rule_xprec_ddouble = sparseir::legendre(n_gauss);
    sparseir::Rule<T> rule = sparseir::convert_rule<T>(rule_xprec_ddouble);

    auto sve = sparseir::CentrosymmSVE<sparseir::LogisticKernel,T>(lk, 1e-6);
    // any check?
}

TEST_CASE("CentrosymmSVE double DDouble", "[sve]")
{
    _test_centrosymmsve<double>();
    _test_centrosymmsve<xprec::DDouble>();
}

TEST_CASE("LogisticKernel", "[sve]")
{
    // Lambda = 1.0
    {
        double lambda = 1.0;
        auto lk = sparseir::LogisticKernel(lambda);
        // Float64(sqrt(eps(SparseIR.Float64x2)))
        // sve_hints for small epsilon = 2.220446049250313e-16
        auto epsilon = 2.220446049250313e-16;
        auto hints = sparseir::sve_hints<double>(lk, epsilon);
        REQUIRE(hints.nsvals() == 26);

        sparseir::ReducedKernel<sparseir::LogisticKernel> reduced_kernel =
            sparseir::get_symmetrized(lk, std::integral_constant<int, +1>{});
        auto hints_reduced = reduced_kernel.sve_hints<double>(epsilon);
        REQUIRE(hints_reduced->nsvals() == (26 +1) / 2);
    }

    // Lambda = 1000.0
    {
        double lambda = 1000.0;
        auto lk = sparseir::LogisticKernel(lambda);
        // Float64(sqrt(eps(SparseIR.Float64x2)))
        // sve_hints for small epsilon = 2.220446049250313e-16
        auto epsilon = 2.220446049250313e-16;
        auto hints = sparseir::sve_hints<double>(lk, epsilon);
        REQUIRE(hints.nsvals() == (25 + 3) * 3); // 84

        sparseir::ReducedKernel<sparseir::LogisticKernel> reduced_kernel =
            sparseir::get_symmetrized(lk, std::integral_constant<int, +1>{});
        auto hints_reduced = reduced_kernel.sve_hints<double>(epsilon);
        REQUIRE(hints_reduced->nsvals() == (84 + 1) / 2);
    }
}

TEST_CASE("LogisticKerne and LogisticKernelOdd", "[sve]")
{
    SECTION("even")
    {
        auto kernel = sparseir::LogisticKernel(1.0);
        auto reduced_kernel = sparseir::get_symmetrized(
            kernel, std::integral_constant<int, +1>{});
        double epsilon = 2.220446049250313e-16;
        using ReducedKernel = sparseir::ReducedKernel<sparseir::LogisticKernel>;
        auto even = sparseir::SamplingSVE<ReducedKernel, xprec::DDouble>(
            reduced_kernel, epsilon
        );
        REQUIRE(even.n_gauss == 16);
        REQUIRE(even.nsvals_hint == 13);

        auto even_rule = even.rule;
        auto ref_rule = sparseir::legendre(even.n_gauss);
        REQUIRE(even_rule.x.isApprox(ref_rule.x));
        REQUIRE(even_rule.w.isApprox(ref_rule.w));
        REQUIRE(even_rule.x_forward.isApprox(ref_rule.x_forward));
        REQUIRE(even_rule.x_backward.isApprox(ref_rule.x_backward));
        REQUIRE(even_rule.a == ref_rule.a);
        REQUIRE(even_rule.b == ref_rule.b);
    }

    SECTION("odd")
    {
        auto kernel = sparseir::LogisticKernel(1.0);
        auto reduced_kernel = sparseir::get_symmetrized(
            kernel, std::integral_constant<int, -1>{});
        double epsilon = 2.220446049250313e-16;
        using ReducedKernel = sparseir::LogisticKernelOdd;
        auto odd = sparseir::SamplingSVE<ReducedKernel, double>(
            reduced_kernel, epsilon
        );
        REQUIRE(odd.n_gauss == 16);
        REQUIRE(odd.nsvals_hint == 13);

        auto odd_rule = odd.rule;
        auto ref_rule_xprec_ddouble = sparseir::legendre(odd.n_gauss);
        auto ref_rule = sparseir::convert_rule<double>(ref_rule_xprec_ddouble);
        REQUIRE(odd_rule.x.isApprox(ref_rule.x));
        REQUIRE(odd_rule.w.isApprox(ref_rule.w));
        REQUIRE(odd_rule.x_forward.isApprox(ref_rule.x_forward));
        REQUIRE(odd_rule.x_backward.isApprox(ref_rule.x_backward));
        REQUIRE(odd_rule.a == ref_rule.a);
        REQUIRE(odd_rule.b == ref_rule.b);
    }
}

TEST_CASE("compute_sve", "[sve]"){
    auto epsilon = std::numeric_limits<double>::quiet_NaN();

    double safe_epsilon;
    std::string Twork_actual;
    std::string svd_strategy_actual;
    std::tie(safe_epsilon, Twork_actual, svd_strategy_actual) = sparseir::auto_choose_accuracy(epsilon, "Float64x2");

    REQUIRE(Twork_actual == "Float64x2");

    using T = xprec::DDouble;
    auto lk = sparseir::LogisticKernel(12.0);

    //auto sve = sparseir::compute_sve<sparseir::LogisticKernel, T>(lk, safe_epsilon);
    auto sve = sparseir::compute_sve<sparseir::LogisticKernel>(lk, safe_epsilon);
    auto s = sve.s;
    //std::cout << "S values: \n" << s << std::endl;
    //std::cout << "diff " << s[0] - 0.52428 << std::endl;
    auto diff = s[0] - 0.5242807065966566;
    REQUIRE(std::abs(diff) < 1e-20);
}

TEST_CASE("choose_accuracy", "[sve]")
{
    REQUIRE(sparseir::choose_accuracy(nullptr, nullptr) ==
            std::make_tuple(2.2204460492503131e-16, "Float64x2", "default"));
    REQUIRE(sparseir::choose_accuracy(nullptr, "Float64") ==
            std::make_tuple(1.4901161193847656e-8, "Float64", "default"));
    REQUIRE(sparseir::choose_accuracy(nullptr, "Float64x2") ==
            std::make_tuple(2.2204460492503131e-16, "Float64x2", "default"));

    REQUIRE(sparseir::choose_accuracy(1e-6, nullptr) ==
            std::make_tuple(1.0e-6, "Float64", "default"));
    // Note: Catch2 doesn't have a built-in way to capture logs.
    // You might need to implement a custom logger or use a library that
    // supports log capturing. Add debug output to see the actual return value
    REQUIRE(sparseir::choose_accuracy(1e-8, nullptr) ==
            std::make_tuple(1.0e-8, "Float64x2", "default"));
    REQUIRE(sparseir::choose_accuracy(1e-20, nullptr) ==
            std::make_tuple(1.0e-20, "Float64x2", "default"));

    REQUIRE(sparseir::choose_accuracy(1e-10, "Float64") ==
            std::make_tuple(1.0e-10, "Float64", "accurate"));

    REQUIRE(sparseir::choose_accuracy(1e-6, "Float64") ==
            std::make_tuple(1.0e-6, "Float64", "default"));
    REQUIRE(sparseir::auto_choose_accuracy(1e-6, "Float64", "auto") ==
            std::make_tuple(1.0e-6, "Float64", "default"));
    REQUIRE(sparseir::auto_choose_accuracy(1e-6, "Float64", "accurate") ==
            std::make_tuple(1.0e-6, "Float64", "accurate"));

}

TEST_CASE("truncate", "[sve]")
{
    using T = double;
    sparseir::CentrosymmSVE<sparseir::LogisticKernel, T> sve(sparseir::LogisticKernel(5.), 1e-6);
    std::vector<Eigen::MatrixX<T>> matrices = sve.matrices();
    REQUIRE(matrices.size() == 2);
    std::vector<std::tuple<Eigen::MatrixX<T>, Eigen::MatrixX<T>,
                            Eigen::MatrixX<T>>>
        svds;
    for (const auto &mat : matrices) {
        auto svd = sparseir::compute_svd(mat);
        svds.push_back(svd);
    }


    // Extract singular values and vectors
    std::vector<Eigen::MatrixX<T>> u_list, v_list;
    std::vector<Eigen::VectorX<T>> s_list;
    for (const auto &svd : svds) {
        auto u = std::get<0>(svd);
        auto s = std::get<1>(svd);
        auto v = std::get<2>(svd);
        u_list.push_back(u);
        s_list.push_back(s);
        v_list.push_back(v);
    }
    for (int lmax = 3; lmax <= 20; ++lmax) {
        auto truncated =
            sparseir::truncate(u_list, s_list, v_list, 1e-8, lmax);
        auto u = std::get<0>(truncated);
        auto s = std::get<1>(truncated);
        auto v = std::get<2>(truncated);

        auto sveresult = sve.postprocess(u, s, v);
        REQUIRE(sveresult.u->size() == sveresult.s.size());
        REQUIRE(sveresult.s.size() == sveresult.v->size());
        REQUIRE(sveresult.s.size() <= static_cast<size_t>(lmax - 1));
    }
}

TEST_CASE("matrices", "[sve]")
{
    /*
    Julia impl
    @testset "matrices" begin
    @testset let ε = nothing, kernel = LogisticKernel(1.0)
        safe_ε, Twork_actual, svd_strat = SparseIR.choose_accuracy(ε, nothing,
:auto) n_gauss = nothing sve = CentrosymmSVE(kernel, safe_ε, Twork_actual;
n_gauss)

        sve_even = sve.even
        sve_odd = sve.odd
        mat_even = only(matrices(sve_even))
        mat_odd = only(matrices(sve_odd))

        @test eltype(mat_even) == Twork_actual
        @test eltype(mat_odd) == Twork_actual
        @test size(mat_even) == (length(sve_even.gauss_x.x),
length(sve.even.gauss_y.x))
        @test size(mat_odd) == (length(sve_odd.gauss_x.x),
length(sve.odd.gauss_y.x))

        # foreach(println, mat_even)
        @test vec(mat_even) ≈ [
            0.011237421480376406178505947524118406
            0.01701547409862283659359369589584811
            0.02103710173795044126254418556580259
            0.0240752940042436433560373406669975
            0.02637679864795684965077241530721722
            0.02804829757391630394372784982308719
            0.02914181679806541525670172250437669
            0.02968316694295852385989481277756871
            0.02968317159056026335086387829450365
            0.029141830321677008633057002813681803
            0.02804831874416109216153531609873354
            0.02637682550521077709810953928487115
            0.02407532397441072269322827102330895
            0.02103713174732040794040222130657014
            0.01701550058475799520906993745461486
            0.01123743980255328561414996021740642
            0.01701473540906193812168955907923619
            0.02576336568430803623572755625888164
            0.03185257313486073791635687243479539
            0.03645275952185437028854324895792661
            0.03993753917938543394524010845346794
            0.04246845094013839378602144032876578
            0.04412427529387939325367519176783434
            0.04494409339146830563165002424740224
            0.044944285817999217714507447182715183
            0.04412483521757160874205675488721342
            0.0424693274609657400834032673397782
            0.03993865116261077819266496280525876
            0.03645400039130120515245278789663899
            0.03185381562824704465863583152045251
            0.02576446230395763694307288675209912
            0.01701549401220924280626033582523272
            0.02103156595278171156670261376172692
            0.03184557383015695743287077282865073
            0.03937235208212400418138508963240247
            0.04505865728280859701021844962779393
            0.04936636997272120081686198445552865
            0.05249522934928464178232550016251124
            0.05454265928815734684045285970315402
            0.05555697302280689426795120668015201
            0.05555837101647419531240118504359598
            0.05454672718243200725984197485319121
            0.052501597364472802916171317559460758
            0.04937444867222670028276660471135002
            0.04506767238828396545308471112433191
            0.03938137901530878031748624625900099
            0.0318535409858173212475514477218633
            0.02103707736137063150080986495521988
            0.02405422043709771716893560348796624
            0.03642243292165965056709074912392391
            0.045031066225610954864806826327112642
            0.05153495426771437288974451743722594
            0.05646256153975678980373077971122801
            0.06004253895157642288851812882099258
            0.06238645540416122894992789079464308
            0.06354958631017582512755648408641319
            0.06355488474550973227599829630227309
            0.06240187289324245563343664754990049
            0.06006667415572221003848855480214285
            0.05649318062096685334215427737696522
            0.05156912275096148890702865873686684
            0.04506527984965207357539438551384798
            0.03645263002757615959323185083824284
            0.02407510986523503251018551599729757
            0.02632044470145795424648265763398696
            0.0398539429255218045498397328364516
            0.04927386499754452379925052622185366
            0.056391289835279585430852348632489061
            0.06178492752473993534547089474890502
            0.06570543429004980237387657538000174
            0.06827521389860686342198319591304249
            0.06955479163595323686744743761801092
            0.06956894326878080559177841289119196
            0.06831639289699210446350275812179236
            0.06576989856114004324550587713301114
            0.06186671148264022111292865311115335
            0.05648255610748834025393720835328319
            0.04936525356417365804808879064424328
            0.03993460411977038298032243147295271
            0.02637624414179782816932937313207087
            0.02792791649540289387466920641372588
            0.04228801554360813264725871214951839
            0.05228368210234788658410709252069655
            0.05983721778105628634736403323326409
            0.06556350798060381228058946239538916
            0.06972936019878816526219239157752537
            0.0724652427053556989592123370621757
            0.07383545464178177963304754767915474
            0.07386566769233941302997804422951948
            0.072553158987793492865001532157607203
            0.06986699328418955764443070509239751
            0.06573812452186601881870864882920898
            0.06003208661213825942624741365949251
            0.05247881834808744020821603898096563
            0.0424602507512314393348547439598995
            0.0280470664622521791934667924282197
            0.0289226263095761020366598068710571
            0.04379429531613081513531158555549263
            0.0541466644545742971194524025563987
            0.061971459817605114734710420813189334
            0.06790676372784635017984282699025573
            0.0722302009220394763843483219075609
            0.07507780553268229996093395425860781
            0.07651628905102439099612314819023906
            0.07657127724807628263989205355833879
            0.07523781751794179661466192448392603
            0.07248070883279400778461740390866838
            0.06822460060186764713456977063888575
            0.06232617809685792557147536344702697
            0.054501886753594345958763105533739914
            0.04410784117678026315103070510165301
            0.0291395381674898540497423114126981
            0.02933013714990099885745778842049148
            0.04441148937200527316034705973272059
            0.05491066858574744902604851639156324
            0.062848786941295781720000044068777856
            0.068874708610226127187429873583721023
            0.07327178668014300248064058178631417
            0.0761792434896285193984224104339756
            0.07766490239664147659724902148262041
            0.07775342716564013641793256181093845
            0.076436851365013062247779449643441449
            0.073675106020101897217861151397739684
            0.06938646059594746131214752673018554
            0.06341996193692920891283694686410933
            0.055482692993984082419940949953321869
            0.04491642774917294428424562058955236
            0.0296794660649723270386502224417218
            0.02916866721194038067675451904013717
            0.04416717490065775609926980186621758
            0.05460973682562876922309096560151247
            0.06250798959916236457147149329810316
            0.068509461039622229176184235142151462
            0.07289821260190656298021238234933809
            0.07581428990795413268094986754312815
            0.077325362472324480283072551202484624
            0.07745431317796219610921296504621118
            0.07618954987381625857303818812668903
            0.07348576752434317441192832800400656
            0.06925504000951934525777989341347548
            0.06334021580796961686741882775150392
            0.0554432698101878048924507426998119
            0.0449030013926438932201369809339885
            0.02967775074586114263398607657032256
            0.02845355874148344242644426488676409
            0.04308456553639931667687255822268183
            0.05327246121858277139039413998018315
            0.06098144404869454985917346952463025
            0.0668457123762839039203115194925257
            0.07114494739460073826908909269205843
            0.07401757516615807383472222197389224
            0.07552986298433297008823515662625944
            0.0757022681528339961786367255235592
            0.07451931125054440006239642251585413
            0.071930585034944691123221524042511255
            0.067842741714625287697695860471794686
            0.06209445672692703034703095675760543
            0.05438732945191329300291238267680252
            0.04406882539963055397366575647755597
            0.02913455353131306958773426966663491
            0.02719587949268490813631931006411441
            0.04118039536949364060948231546187829
            0.05091937777189591882708651114268757
            0.05829216329160801321751268943635051
            0.06390757044007251164220580917259171
            0.06803561218170473874672705904300125
            0.070810490567737555556046621248588164
            0.07229581938625586757599412599427711
            0.07250921869718430195421263025338357
            0.071431554197313188628489801762737299
            0.06900817242675809120353579852588557
            0.06514194304474912169503436534884991
            0.05967028275047143266316218480184573
            0.05229994031306856500613259878261747
            0.04239932583425901335367815243819844
            0.02803928251051587718607081780383762
            0.02539551008815138314913729981884455
            0.03845445511254432187084174431073129
            0.04755004916289345381217692341485587
            0.05443907703075441708368871794255582
            0.05969257410524212794252525481843573
            0.06356524026505002241191657159032284
            0.0661841984110800067499578490897085
            0.0676091210019659536664535023717707
            0.06785463452020553534605997491249302
            0.06689875534310411639426881348174513
            0.0646842949306360900688514113483427
            0.06111302403775760583665509741752768
            0.05602512299321000445481098272044054
            0.04913907720682262065359317062758061
            0.03985756485970863097396927546655064
            0.02636640101453530835924132882185718
            0.02302664900864334937290783881910803
            0.03486764771033464096659714715892814
            0.04311595666419249872794265459003973
            0.04936608168868331433911301675119129
            0.054137949784500439717706158865554
            0.05766469630966341614767556177102225
            0.060063134757230274878432014484842
            0.06138760910511622808194437730341195
            0.06164982624327737108201449109380391
            0.06082633729477013540575020773819339
            0.05886002238668772731920372522998163
            0.05565536120232659612056772006925378
            0.05106057414614978514591555051361344
            0.04481380682571363252098681324868991
            0.03636696847561637956430122595951633
            0.02406416464993592484174577529603775
            0.02000695146253958381533013393694601
            0.03029526167890347583333754502579795
            0.03746274606077897828462010688596
            0.04289599804549339337540149000860622
            0.04704837470630320533082666384219505
            0.05012407930273615351664094661838161
            0.05222576690009029851304252436039843
            0.05340083711467690279525663082918322
            0.05365830429352354680934333484602678
            0.05297517001758492044370226374639436
            0.05129786744840531329234935810829594
            0.04853856964058735354414002326610822
            0.0445602509903758685058924076389205
            0.0391304418666393131370662713086951
            0.03176805645057046804951755069093284
            0.021026154350281072502886568404141
            0.01611343485871627765834403195313796
            0.02439963530432460490754855142967201
            0.03017278595773621684000338479585071
            0.0345503600860567155013627752082263
            0.03789846694097109286799596932188419
            0.04038256688888990210946643051330883
            0.04208604321497328693312422651501566
            0.04304718406838220198943271672110937
            0.04327254970156243592919760605972199
            0.04274202613354550734357194326604612
            0.04141008049097777701435711823753164
            0.039203039921641994039958465214662697
            0.03600741103947818814075545152563919
            0.0316329468365269816408990200495825382
            0.02568921699835269534683511866268644
            0.01700587905414038213249961049623085
            0.01061519575387418026835260958814387
            0.0160740030332647727781913000447665662
            0.019877434455489718402335997222037533
            0.02276193713321533841238655145852134
            0.02496907446218689497103213016113752
            0.02660823342392840275536466515654529
            0.02773461813705913486991301423682147
            0.02837349623186244149521813952464473
            0.02852891986433956163967692532673589
            0.02818702425967885681702484859575368
            0.02731688985298786205886977764031779
            0.02586884675393427160759325852781698
            0.02376691529497037849294491206603047
            0.02088459633609949946758341180873481
            0.016963533379226281509014483361781125
            0.01123079923287431822636056056215348
            0.007189898039173552128269854050509827
            0.01088727170712196595288089689884377
            0.01346346419923980528894657158672339
            0.01541735303081201102220600710917897
            0.01691264400715540378192706540264257
            0.0180235186858889075948508414867204
            0.0187874328155486621393536859574627
            0.01922151125926374379774707523929635
            0.01932843472371062217623200441146501
            0.01909866660877126541420827351807761
            0.01851104524672039630652067256112869
            0.01753165847633808236912389579337783
            0.01610875560839720025408619613086763
            0.01415637845476749423521671746058751
            0.01149926358391138103940237641692836
            0.00761343253495357037816572513074104
            0.0108740479150927250981789231655276769
            0.01646599440554005361923925282973985
            0.02036234084156384874547910776344706
            0.02331772732825079274373224643433434
            0.02557992602236125538598582652621086
            0.02726131540685219944409631559815858
            0.02841867558373553845071707991674842
            0.02907792785118321330690940912315228
            0.02924299676265638993915908240565338
            0.028899163099604115333115107996082633
            0.02801397636979779002389578726440173
            0.02653559938942948892744925200694576
            0.02438517842059229107498152380561602
            0.02143214515190884539017808009859678
            0.0174108746812580837020902698545058
            0.01152796656086505078545362578579755
            0.01341606737607576035462608984988974
            0.02031527243639642639190931901333251
            0.025122677755257075298128095864041123
            0.02876963167504945938948723607797393
            0.03156222994408678814980860919614137
            0.03363953123379573250815062513582768
            0.03507187968071574908011709905290997
            0.03589130397032583376457470368205586
            0.03610236051644035421594036836733434
            0.03568623720081437982166618334231258
            0.03460191597328677080457806108330662
            0.03278423314215731222790260301763994
            0.03013460977778867388018689536691821
            0.02649070916956358074772278519925899
            0.0215235861997667872247393923923484252
            0.01425231223106607847520344484908395
            0.01530800100791542400330024789967546
            0.0231801850644182617846620307318451
            0.02866587617664791621969169101040044
            0.0328282438327047257267284923499251
            0.03601720362892522060134120363986465
            0.03839209086273258516707995778926179
            0.04003364288843364462625614868514404
            0.04097848359577419368943293085507937
            0.04123134818372768887792153918293168
            0.04076971142227476887157383277814208
            0.03954517351834051111592556060365193
            0.037481413522847804687184403457055509
            0.03446384660242245054456767846397776
            0.03030521311615447847527217252824308
            0.02462818273480826267238429211324886
            0.01631014768932747245618082098964874
            0.01670767791554832055205417534409666
            0.02529972431065010437543823202843127
            0.03128747936186864010432553634510877
            0.03583199763818078150615205694199474
            0.03931610438609450675115625514274012
            0.04191463652689506260122898757136755
            0.04371637658847761743875333852528919
            0.04476140844025713329146880408952112
            0.04505425316232992343083754767481605
            0.04456884392838827833675702076930558
            0.04325012055196626484387111093153601
            0.04101202808186101116376860694469664
            0.03772655572120432857613126398971963
            0.03318647490202089887442293751245984
            0.02697715300745085314509007725149708
            0.01786864503262719823606632661724649
            0.01768574790033791428588860248902156
            0.02678086846930062093894673361092749
            0.03311976137037753948738543397482995
            0.03793230638650563976139521185754327
            0.04162490179675855934535297174454798
            0.04438380463019943134166094344358458
            0.04630383797855138679144205779959913
            0.0474275758222241009401543450710645057
            0.04775898498759772154738504808698985
            0.04726859286663444836319583345124924
            0.04589527778321300453315459496342159
            0.04354444410036305859731488944937878
            0.04007683488892205878196782075426831
            0.03526946496060743837471140704547403
            0.02867986106120977339934223580023189
            0.01900010693640363005393688501072024
            0.01828027356022183128543690692824881
            0.02768124803887438299520688822432447
            0.03423395427203577420993079816256252
            0.039210627417222456143013368671425212
            0.04303269976087532983963844093524587
            0.045894089523691971012970290313045558
            0.04789380478029818007831331209996098
            0.04907602334837097709005133298356705
            0.049443882320074891531390687930201717
            0.04896470170787827919703197011656286
            0.04757195377184726275146313462096337
            0.04516372168498627101644101187628907
            0.0415916262720558528386017194406726
            0.03662089175355149730737033537147216
            0.02978994309939153064126030855025175
            0.01973983214100364431571475483365579
            0.01851473766466154235735962542006719
            0.02803641355470115647531507032132848
            0.03467396973447728518348037155000735
            0.03971708241366842622700096081076052
            0.04359411343145049663196281671931485
            0.04650302372551954303200754217076321
            0.04854520112451917371548569738387445
            0.04976558569921290673005547882232866
            0.05016629000175521783654963284634619
            0.04971175689244535338911861548872556
            0.048330883274763751260093966285885234
            0.0459158397250264138725071768575616979
            0.04231139909474648964304016364851895
            0.03727498746118569414426819237786181
            0.0303343964186125252785274505668416
            0.020105382319445558352310358515458903
            0.01840484316814938428014559515003754
            0.02787013295014000312280906040898733
            0.03446913593371788629003153746581815
            0.03948505214828987387852075132846531
            0.04334530065554660050346459870025473
            0.046248300854463193547985402431999914
            0.04829600613136513717962308134152971
            0.04953329949915914790098200182379809
            0.049961168829258585553998890927149787
            0.04954169240591621234097494489310618
            0.04820028249093729240342677073345041
            0.04582490895731320210850199826606554
            0.04225606156625001380326454673281447
            0.03724756246698195542867888252795961
            0.03032503871127420969546699932552807
            0.02010418548396934861043141196672334
            0.01796059603802812572218432012957924
            0.02719754616241342484123178674507468
            0.03363810295289283724551431304945974
            0.03853566248598958907318895970099435
            0.04230891431051421986692534762314594
            0.04515311011160203215154283247961993
            0.04716890317723166726962218849959738
            0.04840030569313747269904755417245631
            0.04884718375428628609443417801894832
            0.04846997970611777597862441671488747
            0.04719202975818448948670350481353045
            0.04489919758399046282772221832425349
            0.04143064424801598046660781776936446
            0.03654110937973494992838797130179225
            0.029762720351122890739341423562203407
            0.019736350386119539028342803905653434
            0.01718558859692147603626978677844221
            0.02602408077513606243946209286473844
            0.03218750708552839922529920296718588
            0.03687627158186802537924958609107011
            0.04049248061194712827062624089315973
            0.04322447699734096891781538403892916
            0.04516965798948259903690119782475568
            0.046370339431935838197250882912040289
            0.046825372297878475703516260215263267
            0.04649452557920490377109441613695294
            0.04530082072405190671350192961635425
            0.04313054416636546178954102879855854
            0.03982494339504488771225520041098366
            0.035144626546291204709930462776849495
            0.02863726424354583090539477893387382
            0.01899465882892187635362403869376902
            0.01607361578982788837286021881892438
            0.02434032904093810558153955615938989
            0.0301056408043345237859215222338776
            0.034493237692515714268393840866931385
            0.03788050279005388823213149059929131
            0.04044491636403260758066447168646868
            0.04227852442546098898299713346188772
            0.04342108528104826568086812996303584
            0.043870637658199166085932350304257718
            0.04358747980303436416796601031254938
            0.04249645233803856154760506587418545
            0.04048726477383210334073084077427089
            0.03740718909686158438692313919267961
            0.03302819306310862241594005556311538
            0.02692314413162381690133037981634623
            0.01786173728180616967854671126077118
            0.01460100567108781248246805711876787
            0.0221104348918952097240525828131709
            0.02734809521905795777414748825474053
            0.03133548872825577985915060394612417
            0.03441646140570505618460353999536059
            0.03675329489807935487744905124844172
            0.0384303656323024742009307213208726
            0.03948393654830397471125196507488049
            0.039911518677221334819735218226035842
            0.03967538804989851965676073224119137
            0.03870473730978142633480371484232635
            0.03689622306461884546538486767367019
            0.03410769737695909330503830039915661
            0.03012869834582279027314291827067815
            0.02456795164141042902782309911742761
            0.01630244405637077681803216875689464
            0.012708675610817706286871718677675713
            0.01924492230130871384932630264071562
            0.02380415692279075611483932732277349
            0.02727603591062723966676568651529649
            0.02996058061549313740612193513957265
            0.03199979671740646588555291077804115
            0.03346766966124528692931195393341593
            0.0343958689317030290411472295420714
            0.03478172634103567954729456019897678
            0.03459122681896490186659120074101696
            0.03376093554364781846780986342055218
            0.03219865198231577632861280184608112
            0.02977821601256292835503400396082852
            0.026314070318165291186202016429762479
            0.0214633120255774717013132716822087
            0.01424460303242364262067153409149567
            0.01025007975560979991819500872680207
            0.015521871924764811102083999483741122
            0.01919931415790783702967213683150941
            0.02200027063449621372876960676728746
            0.02416715449827402208262717524368347
            0.0258149429957462696392440383236126
            0.027003628250858717326566726666879489
            0.0277588160990091627701657919828559
            0.02807806105094546236149823401545819
            0.02793323688058659647891350477307647
            0.02727212233091226138751145160423335
            0.02601903239840744051110194753245334
            0.02407078297912531189601268428499544
            0.02127631982619182735987107706293883
            0.01735770214780537049303444076287301
            0.0115211656383626941860779591915405891
            0.006758415090185053631231361301144306
            0.01023439740593629656307299509219745
            0.01265921424853148112919835143064742
            0.01450631171738116214083054637292563
            0.01593568937343286665016707172199803
            0.01702332556266715898930421744790579
            0.01780889725070336093943323580128594
            0.0183093117313984747355923516276287384
            0.01852284580634754417406634047102814
            0.01843069301314603022941043128333393
            0.0179980209100486209875402102360638
            0.01717442644931500055137192197776126
            0.015891333364292610621880094840772911
            0.01404861556811497850789504603592798
            0.01146249125646662713711020161501558
            0.007608729230290208108451061042288089
        ]

        # foreach(println, mat_odd)
        @test vec(mat_odd) ≈ [
            -1.08115562356321526158977836971309e-07
            -8.560587298682641655687766506401284e-07
            -2.565891698130309495188829036113193e-06
            -5.345326076672976513338150911692891e-06
            -9.149136133509465789538002174446279e-06
            -1.379895821627599077721775092457217e-05
            -1.90035494261661139369893456864907364e-05
            -2.438409818576034477746099843104961e-05
            -2.950415805557570216943486624093876e-05
            -3.390192172555330969461777505434374e-05
            -3.712129236838290197847516229165283e-05
            -3.873659989550232175765852032847836e-05
            -3.836215031329146795993241094438989e-05
            -3.562590404369288319126637726586762e-05
            -3.00346771514599418972308002015403e-05
            -2.029285767804626719149279742266301e-05
            -8.560215659524305848625869699196904e-07
            -6.777976512949874148767487365705902e-06
            -2.031584282788091141531121575495833e-05
            -4.23224491228766003998911741133998e-05
            -7.243972841307861875815926134858206e-05
            -0.0001092554865534823605593698303127961
            -0.0001504638014288593164360752878389559
            -0.00019306541351208207497136837487034946
            -0.0002336047150105897847016634186651634
            -0.0002684252658240790830705305317267179
            -0.0002939157925990545141395649128712882
            -0.0003067058819410944448097960791144397
            -0.0003037416016019505813139891589712273
            -0.0002820771174226203407649005079343374
            -0.0002378074213282409812377225645534516
            -0.0001606741171296676771892737089128145
            -2.5652164993608206197371913464139032e-06
            -2.031137861164116198074228225999349e-05
            -6.087995258500958480804321102311386e-05
            -0.0001268266686747847735748857282533667
            -0.0002170787402022448544106971009812918
            -0.0003274047000495484640507114310834725
            -0.00045089503463225082717543080883609636
            -0.0005785625409297255698037611233250035
            -0.0007000522559594763532171407467690043
            -0.0008044068764660996616940163529552989
            -0.0008808037379782540857547191975466264
            -0.0009191412199479178879845621210425619
            -0.0009102655502543593161436571750900529
            -0.0008453466965068860838006346488580738
            -0.0007126803738474628711697396712256814
            -0.0004815226499569017971784314800375706
            -5.34064721011484506456562777660311831e-06
            -4.228723927839167584884570652000091e-05
            -0.0001267490080856635906290562161748023
            -0.00026404732689849650169421331610494391
            -0.0004519500034852829295523376512645442
            -0.0006816497616868222997232611332525981
            -0.0009387647227692833278029935691464254
            -0.001204587459128299936677525122657521
            -0.001457561582653781548683765243835409
            -0.001674873694851597299736006032542779
            -0.0018339865800332912722568292667855296
            -0.001913859934272239887887285742549684
            -0.001895423678010862884007544486727422
            -0.001760280609206461192873448049113013
            -0.001484049933511714542568237155500448
            -0.00100270768879086417850980974449961
            -9.129589033231667639815208687610418e-06
            -7.228809939309739132131273560072956e-05
            -0.0002166719680720499619189094913291066
            -0.0004513795148958803078458711577754665
            -0.0007725994742041005176320207001722914
            -0.001165284744855501301615902927650431
            -0.001604862054945786859097824939741033
            -0.002059364133997868578263817800413125
            -0.002491948765598641728035820560986355
            -0.002863614459224262083642045020239062
            -0.003135817283451270265021771335609428
            -0.003272557163201487104130420547108255
            -0.003241190925497810582785104683169999
            -0.003010221653078867602019107229610587
            -0.002537925345896923353294990749733133
            -0.0017147971001299443816627455951840651
            -1.373973417716776458521674801470082e-05
            -0.0001087912935677958437297607770887699
            -0.0003260853122920668419482141365227387
            -0.0006793187955185331106621860357476565
            -0.001162767684203242607983402143031365
            -0.001753808583696459340207157827007439
            -0.002415490177052911026415997996961705
            -0.0030997342683077642961269356043445344
            -0.003751113702705033942950208585728407
            -0.004310924675446261814812294311146239
            -0.00472111442234701747467243670567251
            -0.004927419772770529249307225552415027
            -0.004880600911328009006836565344667876
            -0.0045331327647752453537541909150314153
            -0.003822102927259172097398567517001676
            -0.002582558062094475325995103727006813
            -1.886061402475940826132625651498038e-05
            -0.0001493385695351504904545395250020229
            -0.0004476214116271952231358188303704699
            -0.000932520046513195838067544348509895
            -0.0015962013468435760082745227027304136
            -0.002407655509043783192596801756082812
            -0.00331622259611080578553361522211773
            -0.004255970506843812768840053741900484
            -0.0051508537367094646294494523135872511
            -0.00592027309900518110229539262607868
            -0.0064844454440067388587184653531007
            -0.006768709332987776611395078006909986
            -0.006705239583591047318848402268413495
            -0.006228543415077901924390755959145533
            -0.005252014189617718563860099812461951
            -0.003548905140177125257323988116381712
            -2.409409162571384611216283370790517e-05
            -0.0001907775174283811852820033409205464
            -0.0005718320169833297468501858179943493
            -0.001191303751394977446239389678276268
            -0.002039228373996551664621659410019101
            -0.003076070556814205050519331709446373
            -0.004237223440218471236648884083909615
            -0.005438573369232618409076398134012124
            -0.006583042762673260745903930788299817
            -0.007567639686674236487495945493047056
            -0.008290279479207715687688421769960332
            -0.008655280483654202620188232480489745
            -0.008575590750335875257697060480736867
            -0.007967100425283081180258060252412209
            -0.00671874166552726523196899109210029
            -0.004540301883695898778911277899988576
            -2.899275655453413968487748632926166e-05
            -0.0002295655636240865293661995871944946
            -0.0006880991786242046687103827745187391
            -0.001433552190574906917078694673834068
            -0.002453998276356264584411308077982577
            -0.003701983515977556927564050570749465
            -0.005099932148228218637188131651796179
            -0.006546800396464959874847323866290177
            -0.007925878110634493280222971070896521
            -0.009113191737473260452847746649671482
            -0.009985655213435455294723006192151395
            -0.01042767578710465375838717379985349
            -0.010333888268908074083684666930349133
            -0.009602410716089520176079225373149919
            -0.008098944110838708037945428882015005
            -0.005473443431010173312050057089476339
            -3.310122633408064408412455612755958e-05
            -0.0002620969778130180402335118979881487
            -0.0007856151293400289893462590669585921
            -0.00163674921561983110169855876326735
            -0.002801968025251239835465234454353694
            -0.004227252314517560059032992331695497
            -0.005824255322202853477390258801464139
            -0.007477843192674108558330036151230156
            -0.009054906949587889073861852162806787
            -0.01041384971256360368168354919071065
            -0.011413815567963977035012920012976556
            -0.01192222148255153700408950533592404
            -0.01181795185059499766108038203890491
            -0.010983791319803816749731540509203477
            -0.009265542589002223913292902648240935
            -0.006262451605009243764597312567326329
            -3.599310900135238211282672503861714e-05
            -0.0002849955313206159764004755654706057
            -0.0008542593088293764382275385202960879
            -0.001779806301923142479373174469877674
            -0.003047024068967716297805344400850809
            -0.004597362714575854105867883238660455
            -0.006335020315669115557228963351798863
            -0.00813507547212560397876057994786188
            -0.009852956321995518141785999457978422
            -0.011334630254224551163235446351660712
            -0.01242654741556228592960739388684054
            -0.0129838183817156488474116158340708
            -0.01287377383590690446319211445934242
            -0.01196789384312076384970617631810915
            -0.01009747943126022029013348993852336
            -0.006825452206834181570234354005127938
            -3.729545518025187385746113917903459e-05
            -0.0002953081094761275984767087212719976
            -0.0008851786981218424048215234829664357
            -0.001844271596017245323955834657363777
            -0.003157552038835297246417102991462185
            -0.0047645506168758301647879604485968865
            -0.006566276644045733400195447609059149
            -0.0084335747997428301690993324638846348
            -0.0102168178566054607593199240255076
            -0.01175633174529524625761306153819299
            -0.01289260188250412820454036610390569
            -0.01347473334087427705422621541198616
            -0.01336422972579307190364417763898154
            -0.01242679663759323930736565686862104
            -0.0104865421099005047582146430091471
            -0.0070891861855129018594819694938224312
            -3.669116857658408346561038184284904e-05
            -0.0002905238120905061476036082595454947
            -0.0008708452852754194791687022602467301
            -0.001814450879360833460528646081725815
            -0.003106648205379560299208663312229351
            -0.00468813238458198752017282427935311
            -0.0064617745060970947897609686109810393
            -0.008300777811103161894468588835755763
            -0.01005810302457898984377274572790195
            -0.01157660060637781165451792254911359
            -0.01269896138001203669679077691321983
            -0.0132760267687413680628038657243227
            -0.01317059007160723721548760833542911
            -0.012249487118028192967955986590491377
            -0.01033866255082651427928087782799106
            -0.006989907150586591520831813550011516
            -3.388131716682547804645101314967192e-05
            -0.0002682755556094534055922165635203113
            -0.0008041620028654946206121340069949617
            -0.001675546980379469366424895838011425
            -0.002868941736498355686641140618093624
            -0.004329729848037000611331679304977224
            -0.0059684256068712757543730241731977941
            -0.007668153961685779747923715447644708
            -0.009293266394988933918957258053872137
            -0.01069859870797188225328322972356284
            -0.01173858762220400663925469076355663
            -0.01227493409093748696426122558930476
            -0.01218017970679329933535594060818068
            -0.01133052579498765193542118906014108
            -0.0095644394622545463921850789335707435
            -0.0064670091913559112654727815829144748
            -2.844240822489485052271080900482583e-05
            -0.0002252099921440877611167361275178935
            -0.0006750757281883765217357358559884306
            -0.001406605217503634020877206051693821
            -0.002408524685299427323220680543846018
            -0.003635078087987717195698614919671318
            -0.005011274418623432508423282899208531
            -0.0064391342695142650997303888779879293
            -0.007804867173619664093432176308036362
            -0.008986580874105439874415886915499637
            -0.009861888786604707002383738683315185
            -0.01031433632288931143289174537633899
            -0.01023644498484034883957970022185797
            -0.00952376188015889076719204223793795
            -0.008040173290730178754174669699868487
            -0.005436722213663609894246721605641398
            -1.916919337881795521701293802722558e-05
            -0.0001517837944790937265146421618905855
            -0.00045497930862428627673660487221580799
            -0.0009480151701491097769758774770633988
            -0.001623312866324124815190541005356604
            -0.002450071127386631598473260858202639
            -0.003377799891738560807709777169311931
            -0.004340517383518625777835576459775511
            -0.005261565485957923798610709611734984
            -0.0060587808605249886933344000963654383
            -0.006649604035374152155299453122295407
            -0.006955407791228014595983958527440902
            -0.0069035652633029015487210744346323017
            -0.006423470227284238993719304918653764
            -0.005423184444123727320734388807223157
            -0.003667265735399705517153687873928952
            -1.308466668327866096444227180260086e-05
            -0.0001036058619378584258365191615117737
            -0.0003105639633172806563454494683518451
            -0.0006471069602007531371024928113705615
            -0.001108066541284699108338572236018862
            -0.001672426902095891526383344783064171
            -0.0023057363823259135982387488853909446
            -0.002962969260037389714357569238244087
            -0.00359180743006444574803601484744491
            -0.004136164249521671124021860315090955
            -0.004539667614308036979057518534609297
            -0.004748613805954530758791772026258655
            -0.004713383094160733538483334986870773
            -0.0043857305760505527918368052778539706
            -0.003702851863388523308067329067197709
            -0.002503975311196192965814485582722498
            -1.999267264923365647944954756157401e-05
            -0.0001583042774107119337681469584318595
            -0.0004745260320470212795225292921647526
            -0.0009887509049924746827126201472839741
            -0.001693091626631259158279258374211838
            -0.002555455197695067413699510914882642
            -0.003523226499424747894105399680972568
            -0.004527634636599970356415712978437687
            -0.005488756411488438713722303818068533
            -0.006320888457342247298796035682875294
            -0.006937860304383376778962592489784596
            -0.0072575463417731637690253764958927967
            -0.007204036868422421390373846167071812
            -0.006703513721889511292826800878481352
            -0.005659915692609207197626465494981529
            -0.00382746582945556870258674627129432
            -2.510816523347664069430321795665414e-05
            -0.0001988094416612602715515085429075022
            -0.0005959441730641423246449523657592005
            -0.001241754427754108543291440237543663
            -0.0021263564431157565560119212249075
            -0.003209486076514911186521229692779397
            -0.004425122149863104269695043150126243
            -0.005686955817123553819261387047255797
            -0.006894650145918929004101046588259071
            -0.007940559631121409265077038227806473
            -0.008716382751360946071685622211918824
            -0.00911882533000260440367306332828468
            -0.009052345209968216854104117466893033
            -0.0084240064203038451013817784188777411
            -0.007112945517004650662557389761822132
            -0.004810215225159139760900556608262695
            -2.935280945653285393037601398288427e-05
            -0.0002324192177781186186859310800223541
            -0.0006966943510325157232264308679353769
            -0.001451700803011986856603630211871864
            -0.0024859199437797935084690031875766582
            -0.00375234822388270725842022973064128
            -0.005173897480889721772776906035635207
            -0.006649765291227646090448455839603694
            -0.008062712550194617875353589370550045
            -0.009286873622467629843695595830150484
            -0.01019550023179934466354473970080896
            -0.010667577062769986493253958180946321
            -0.01059106060398368578770558002161944
            -0.0098569198058719894761248705270155648
            -0.008323486282275050018035089385920074
            -0.005629110442757154086701153554134662
            -3.299519800413076098336495913498436e-05
            -0.0002612603621828756603457623223013078
            -0.0007831517707161783935782102293546295
            -0.001631874556784025020691608805780928
            -0.002794532651234786963303220329167755
            -0.004218386986530340852489204321473915
            -0.005816919265487977543030194943483885
            -0.007476958775657643413276312745995203
            -0.0090668051149606839686691426010037652
            -0.01044494216492575726866434453151372
            -0.0114686948405656613227945265696564
            -0.01200165805328137927541449777184901
            -0.01191738085367842101009590843080197
            -0.01109274890633889847476398583376955
            -0.009367976898421699189272619088780041
            -0.006335855321534962616967463891960838
            -3.610614268536399808150122679897036e-05
            -0.00028589357176857197677592934836156
            -0.000856997165832122089836369263061826091
            -0.001785777842655852388160359743805825
            -0.00305819176268821080141280587028421386
            -0.004616654896966310778900834749087855
            -0.006366669798926715878224462119382872
            -0.008184579730864301313489219940087941
            -0.009926381215913641988121362211534371
            -0.01143717379321800931528742778648443
            -0.01256056972371300269310848351129731
            -0.0131468132746009313400613857554516
            -0.01305686905109737294792562881345428
            -0.01215528730713543570061988424899838
            -0.01026651107507779380861860905215778
            -0.006944039779120365075883634841175993
            -3.8665171996425880631968688681431065e-05
            -0.0003061567409356170276513341630657921
            -0.0009177444657253143033360677350350525
            -0.001912396983950593842436138099813885
            -0.0032751584311316115393340663511552567
            -0.004944519501252859901656686381703495
            -0.006819503266023917776985106186845332
            -0.008767914328262687897952433295744577
            -0.01063568299919263719648332534812843
            -0.01225687977437553834630175669890562
            -0.01346371440429385047636708197748317
            -0.01409521800038126208211989150536704
            -0.01400169045959639063737118294713485
            -0.01303719074915562730342977821935925
            -0.0110128538002335488546853632077962
            -0.0074494339727244167765069857656271033
            -4.060223941024427026963799248627757e-05
            -0.000321495210116199882240580401936707
            -0.000963730696050598876608224555448353287
            -0.00200826486959010154511826315281443
            -0.003439488537543252360058428831416789
            -0.00519299048483742214045338253865877
            -0.007162986097137277591359947417005717
            -0.009210917050782533607155012749399858
            -0.0111751566195242993539901334637886
            -0.01288140485123235223450032197792282
            -0.0141530990485553018416694974594014
            -0.01482051595525717628476573195424073
            -0.01472552157606697573900813774595414
            -0.01371383571210527945878767846751625
            -0.01158613310131682039502236359738239
            -0.0078378910404318866937536615813305203
            -4.18201999975819970944320747793705e-05
            -0.0003311397370264447801082794755523037
            -0.0009926494392434517706431185688795276
            -0.0020685723971816758669237924075989264
            -0.003542935495748173893104783673760616
            -0.005349590672828340573726516510491558
            -0.007379853187354138456952095396648378
            -0.009491291141993594233488490141516444
            -0.01151760561290261745027403964783617
            -0.0132792059728154761569409417377105
            -0.01459383502195454916477822731591933
            -0.01528592764451498859137588872151793
            -0.01519158937372659274362964260659691
            -0.01415079257935157538791418355864115
            -0.01195714496471619306899341708542596
            -0.008089608819887191853801448593593641
            -4.220877542996739214321626076258527e-05
            -0.0003342170739814731328712047344016079
            -0.001001882308696849528171362104104732
            -0.00208785922452376683310402294433616992
            -0.003576133317264763608196212060718872
            -0.0054001423326643476440396372699085591
            -0.007450472028227209623760495937846157
            -0.009583657536283469403291054925424563
            -0.01163203599154582045925655253183703
            -0.01341428489379174622690811418462636
            -0.01474604547531121195049245248524072
            -0.01544935089428132420746000167511527
            -0.01535773927741265297357058652183892
            -0.01430854543945035140143488886948675
            -0.01209234081950538695830483144830175
            -0.008181827308320102144498383527942859
            -4.165216885270051647751178751146577e-05
            -0.0003298102664778185223011745519558154
            -0.0009886797448765396603052460040237369
            -0.002060390764252856689199995056488673
            -0.003529243137677828029598776022850745
            -0.005329745530700343417063463441830773
            -0.007354196808390044324621501730552971
            -0.009461304122575200101581165517324969
            -0.01148579067813094718250870269908
            -0.01324866471177545559240357947587899
            -0.01456760563720244517164552472705768
            -0.01526625072186140038331330427135261
            -0.01517932543758979361068900885926485
            -0.01414519884396344166087415183770168
            -0.011956123869203444313985487137236666
            -0.008090385868898494866130190609346392
            -4.0029006645508300257427663185950359e-05
            -0.0003169581970884062281166817195239627
            -0.0009501597246135663575129482630851416
            -0.001980155938765381521569046293935634
            -0.003391950941810771576256952654128859
            -0.005122778757397477342079964914759229
            -0.00706937769254141825709718294207340977
            -0.009096212391190183981816348829709733
            -0.011044604176636585583180917258579
            -0.01274248284069589761146017507453363
            -0.01401428071014825091440854564886897
            -0.014689841674802233471058630573224832
            -0.014609427338462011400444753271057024
            -0.013616707835473388836445312567787919
            -0.01151106140239711275256433734870493
            -0.007789873971164942367316650030691515
            -3.719935508738657973229329603170368e-05
            -0.0002945527874167889708392964493231078
            -0.0008829997014973911406310174586297781
            -0.001840225772988024765854986782516029
            -0.003152370958653152499193654343062063
            -0.004761248202555042672141331873857517
            -0.006571094146266557196303285907853656
            -0.008456160672800296726439693807779287
            -0.01026911539987293268603287092634741
            -0.01185000812475138031242378762354068
            -0.01303539369564011485580607590918212
            -0.01366659809186930807758413810810389
            -0.01359443258893678707675886491060735
            -0.01267279923204690769207263512101675
            -0.01071446116659719194928010002237814
            -0.007251323975384034923860520173155826
            -3.296258486585210997629457240368209e-05
            -0.0002610053671208576174741377089814952
            -0.0007824365687710647873585232190238172
            -0.00163066989322143921933195493024816
            -0.002793478804927056454615772028279597
            -0.0042194063120460099030991803415030097
            -0.005823740003207634093354815972541844
            -0.007495203264948766337291200991986406
            -0.00910333783173513863768362625773477988
            -0.0105063793911984407725819054101737
            -0.01155928927110740233272764120287359
            -0.01212106936265943590881087678065125
            -0.01205898412776512684096948546970956
            -0.01124298078307753520549807574474371
            -0.009506568914469348242573194673879189
            -0.0064342339328268966394004187641310468
            -2.692326124731139396493296683559279e-05
            -0.000213184767485473919762062186065863
            -0.0006390833920840959933996619388512657
            -0.001331922852211781023705365443211753
            -0.002281749359595168793017949241464007
            -0.003446594887868946839369789222705934
            -0.00475735344285895288754868940699188
            -0.006123225141617143541469462356322366
            -0.00743770981532236284301069232812718
            -0.008584998293341129959934958814827454
            -0.009446501515359969974001629151509301
            -0.0099068193960495065143500514835038737
            -0.009857215819962366869215033892621311
            -0.0091911124894868318570274395229845
            -0.007772178816021472992971825385261656
            -0.005260593838363079898111105906669982
            -1.787829623544891340820012852436472e-05
            -0.0001415646507591501478674663575964946
            -0.0004243821756809378815842866086478954
            -0.0008844663734239308015584334893281651
            -0.001515219892274208745591267956594139
            -0.002288797297182696855589399943971533
            -0.003159341605854703972114151569296072
            -0.004066591344473152955134540373173224
            -0.004939846743690026364388627955782255
            -0.0057021980885624051240222481011235801
            -0.006274849522783878229407600720740469
            -0.006581080411173603938251091976370168
            -0.006548562988852377285355524833903855
            -0.006106389622477078254542287328083609
            -0.0051638993108195710043030402190660073
            -0.003495269031434899231825739889142471
        ]
    end
end
*/
    double epsilon = 2.220446049250313e-16;
    auto kernel = sparseir::LogisticKernel(1.0);
    auto sve = sparseir::CentrosymmSVE<sparseir::LogisticKernel, xprec::DDouble>(
        kernel, epsilon
    );
    auto sve_even = sve.even;
    auto sve_odd = sve.odd;
    auto matrices_even = sve_even.matrices();
    auto matrices_odd = sve_odd.matrices();
    REQUIRE(matrices_even.size() == 1);
    REQUIRE(matrices_odd.size() == 1);
    auto mat_even = matrices_even[0];
    auto mat_odd = matrices_odd[0];
    REQUIRE(mat_even.rows() == sve.even.gauss_x.x.size());
    REQUIRE(mat_even.cols() == sve.even.gauss_y.x.size());
    REQUIRE(mat_odd.rows() == sve.odd.gauss_x.x.size());
    REQUIRE(mat_odd.cols() == sve.odd.gauss_y.x.size());

    REQUIRE(std::fabs(mat_even(0, 0).hi() - 0.011237421480376406178505947524118406) < 1e-20);
    REQUIRE(std::fabs(mat_odd(0, 0).hi() -
                      -1.08115562356321526158977836971309e-07) < 1e-20);
}

TEST_CASE("SVEResult::part", "[sve]") {
    // Create dummy polynomial vectors (default-constructed)
    std::vector<sparseir::PiecewiseLegendrePoly> dummy(4);
    sparseir::PiecewiseLegendrePolyVector u_dummy(dummy);
    sparseir::PiecewiseLegendrePolyVector v_dummy(dummy);

    // Create a singular value vector (for example: 10, 5, 1, 0.1)
    Eigen::VectorXd s_dummy(4);
    s_dummy << 10, 5, 1, 0.1;

    // Set the object's epsilon to 0.5.
    double eps = 0.5;
    sparseir::SVEResult res(u_dummy, s_dummy, v_dummy, eps);

    // When using NaN as eps, the object's epsilon is used.
    auto tup = res.part(std::numeric_limits<double>::quiet_NaN());
    auto u_part = std::get<0>(tup);
    auto s_part = std::get<1>(tup);
    auto v_part = std::get<2>(tup);

    // For s_dummy, threshold is eps * s[0] = 0.5*10 = 5.
    // Hence only the first two values (10 and 5) satisfy >=5.
    REQUIRE(u_part.size() == 2);
    REQUIRE(s_part.size() == 2);
    REQUIRE(v_part.size() == 2);

    // Now test with max_size constraint: max_size = 1 should return only one element.
    auto tup_max = res.part(std::numeric_limits<double>::quiet_NaN(), 1);
    auto u_part_max = std::get<0>(tup_max);
    auto s_part_max = std::get<1>(tup_max);
    auto v_part_max = std::get<2>(tup_max);
    REQUIRE(u_part_max.size() == 1);
    REQUIRE(s_part_max.size() == 1);
    REQUIRE(v_part_max.size() == 1);
}